{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Deploys an API (RESTful or not)",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/project-name"
    },
    "IAMRole": {
      "Description": "The IAM role that has access to all of the projects resources.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/iam-role"
    },
    "Environment": {
      "Description": "The environment (dev, testing, prod, etc.) to deploy to.",
      "Type": "String"
    },
    "VPCPrefix": {
      "Description": "The 'export' name prefix of the cloudformation stack for the VPC used by this service.",
      "Type": "String"
    },
    "Version": {
      "Description": "The identifier/version associated with this API.",
      "Type": "String"
    }
  },
  "Conditions": {
    "IsProd" : {"Fn::Equals" : [
      {"Ref" : "Environment"},
      "prod"
    ]}
  },
  "Resources": {
    "RestAPI": {
      "Type" : "AWS::ApiGateway::RestApi",
      "DependsOn": ["APIUser"],
      "Properties" : {
        "Description" : {"Fn::Join": ["", [
          "The ",
          { "Ref": "ProjectName" },
          " REST API (Release Candidate ",
          {"Ref": "Version"},
          ")"
        ]]},
        "Name" : { "Fn::Join": ["-",  [
          { "Ref": "ProjectName" },
          "api",
          { "Ref": "Environment" }
        ]]},
        "Policy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {"Fn::Join": ["", [
                    "arn:aws:iam::",
                    {"Ref": "AWS::AccountId"},
                    ":root"
                  ]]},
                  {"Ref": "IAMRole"},
                  {"Fn::Join": ["", [
                    "arn:aws:iam::",
                    {"Ref": "AWS::AccountId"},
                    ":role/",
                    "PhoenixUIAdmins"
                  ]]},
                  {"Fn::If": [
                    "IsProd",
                    { "Ref" : "AWS::NoValue" },
                    {"Fn::GetAtt": [
                      "APIUser",
                      "Arn"
                    ]}
                  ]}
                ]
              },
              "Action": "execute-api:Invoke",
              "Resource": [
                "execute-api:/*/*/*"
              ]
            }
          ]
        }
      }
    },
    "RestAPIDoc": {
      "Type" : "AWS::ApiGateway::DocumentationPart",
      "Properties" : {
        "Location" : {
          "Type" : "API"
        },
        "Properties": {
          "Fn::Join": ["\n", [
            "{",
              "\t\"info\": {",
                "\t\t\"description\": \"The Phoenix API.\"",
              "\t}",
            "}"
          ]]
        },
        "RestApiId" : {"Ref": "RestAPI"}
      }
    },
    "ProjectsResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
        "ParentId" : { "Fn::GetAtt": ["RestAPI", "RootResourceId"] },
        "PathPart" : "projects",
        "RestApiId" : { "Ref": "RestAPI" }
      }
    },
    "ProjectsGet": {
      "Type" : "AWS::ApiGateway::Method",
      "Properties" : {
        "RestApiId" : { "Ref": "RestAPI" },
        "AuthorizationType" : "AWS_IAM",
        "HttpMethod": "GET",
        "ResourceId" : { "Ref": "ProjectsResource" },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ],
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates" : { "application/json": "" },
              "StatusCode" : "200"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {"Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":lambda:path/2015-03-31/functions/",
            {
              "Fn::ImportValue": {
                "Fn::Join": ["-", [
                  {"Ref": "ProjectName"},
                  "lambda",
                  {"Ref": "Environment"},
                  "LambdaProjectsArn"
                ]]
              }
            },
            "/invocations"
          ]]}
        }
      }
    },
    "ProjectsGetDoc": {
      "Type" : "AWS::ApiGateway::DocumentationPart",
      "Properties" : {
        "Location" : {
          "Type": "METHOD",
          "Path": "/projects",
          "Method": "GET"
        },
        "Properties": {
          "Fn::Join": ["\n", [
            "{",
              "\t\"info\": {",
                "\t\t\"description\": \"Gets a list of all project account-roles (i.e [3818471741-ProjectAdmins, ...])\"",
              "\t}",
            "}"
          ]]
        },
        "RestApiId" : {"Ref": "RestAPI"}
      }
    },
    "ProjectResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "DependsOn": ["ProjectsResource"],
      "Properties" : {
        "ParentId" : {"Ref": "ProjectsResource"},
        "PathPart" : "{project-account-role}",
        "RestApiId" : { "Ref": "RestAPI" }
      }
    },
    "ProjectGet": {
      "Type" : "AWS::ApiGateway::Method",
      "Properties" : {
        "RestApiId" : { "Ref": "RestAPI" },
        "AuthorizationType" : "AWS_IAM",
        "HttpMethod": "GET",
        "ResourceId" : { "Ref": "ProjectResource" },
        "RequestParameters": {
          "method.request.path.project-account-role": true
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "ResponseModels": {
              "application/json": "Empty"
            }
          }
        ],
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates" : { "application/json": "" },
              "StatusCode" : "200"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {"Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":lambda:path/2015-03-31/functions/",
            {
              "Fn::ImportValue": {
                "Fn::Join": ["-", [
                  {"Ref": "ProjectName"},
                  "lambda",
                  {"Ref": "Environment"},
                  "LambdaProjectsArn"
                ]]
              }
            },
            "/invocations"
          ]]}
        }
      }
    },
    "ProjectPutValidator": {
      "Type" : "AWS::ApiGateway::RequestValidator",
      "Properties" : {
        "Name": "ProjectPutValidator",
        "RestApiId": {"Ref": "RestAPI"},
        "ValidateRequestBody": false,
        "ValidateRequestParameters": true
      }
    },
    "ProjectPut": {
      "Type" : "AWS::ApiGateway::Method",
      "Properties" : {
        "RestApiId" : { "Ref": "RestAPI" },
        "AuthorizationType" : "AWS_IAM",
        "HttpMethod": "PUT",
        "ResourceId" : { "Ref": "ProjectResource" },
        "RequestValidatorId": {"Ref": "ProjectPutValidator"},
        "RequestParameters": {
          "method.request.path.project-account-role": true
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            },
            "ResponseModels": {
              "application/json": "Empty"
            }
          }
        ],
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates" : { "application/json": "" },
              "StatusCode" : "200"
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {"Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":lambda:path/2015-03-31/functions/",
            {
              "Fn::ImportValue": {
                "Fn::Join": ["-", [
                  {"Ref": "ProjectName"},
                  "lambda",
                  {"Ref": "Environment"},
                  "LambdaProjectsArn"
                ]]
              }
            },
            "/invocations"
          ]]}
        }
      }
    },
    "APIUser": {
      "Type": "AWS::IAM::User"
    },
    "APIUserCredentials": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {"Ref": "APIUser"}
      }
    },
    "MainGet": {
      "Type" : "AWS::ApiGateway::Method",
      "Properties" : {
        "RestApiId" : { "Ref": "RestAPI" },
        "AuthorizationType" : "AWS_IAM",
        "HttpMethod": "GET",
        "ResourceId" : { "Fn::GetAtt": ["RestAPI", "RootResourceId"] },
        "RequestParameters": {
          "method.request.querystring.error": false
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false,
              "method.response.header.content-length": false,
              "method.response.header.date": false,
              "method.response.header.etag": false,
              "method.response.header.x-powered-by": false
            },
            "ResponseModels": {
              "application/json": {"Ref": "EnvironmentModel"}
            }
          },
          {"StatusCode": "400"},
          {"StatusCode": "401"},
          {"StatusCode": "403"},
          {"StatusCode": "404"},
          {"StatusCode": "500"}
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "StatusCode" : "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.content-length": "integration.response.body.headers.content-length",
                "method.response.header.date": "integration.response.body.headers.date",
                "method.response.header.etag": "integration.response.body.headers.etag",
                "method.response.header.x-powered-by": "integration.response.body.headers.x-powered-by"
              },
              "ResponseTemplates" : {
                "application/json": "$input.json('$.bodyJson')"
              }
            },
            {
              "StatusCode" : "400",
              "SelectionPattern": "\\{\\\"status\\\"\\:400.*",
              "ResponseTemplates" : {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.bodyJson"
              }
            },
            {
              "StatusCode" : "401",
              "SelectionPattern": "\\{\\\"status\\\"\\:401.*",
              "ResponseTemplates" : {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.bodyJson"
              }
            },
            {
              "StatusCode" : "403",
              "SelectionPattern": "\\{\\\"status\\\"\\:403.*",
              "ResponseTemplates" : {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.bodyJson"
              }
            },
            {
              "StatusCode" : "404",
              "SelectionPattern": "\\{\\\"status\\\"\\:404.*",
              "ResponseTemplates" : {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.bodyJson"
              }
            },
            {
              "StatusCode" : "500",
              "SelectionPattern": "\\{\\\"status\\\"\\:500.*",
              "ResponseTemplates" : {
                "application/json": "#set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))\n$errorMessageObj.bodyJson"
              }
            }
          ],
          "PassthroughBehavior": "WHEN_NO_TEMPLATES",
          "ContentHandling": "CONVERT_TO_TEXT",
          "Uri": {"Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":lambda:path/2015-03-31/functions/",
            {
              "Fn::ImportValue": {
                "Fn::Join": ["-", [
                  {"Ref": "ProjectName"},
                  "lambda",
                  {"Ref": "Environment"},
                  "LambdaVPCProxyArn"
                ]]
              }
            },
            "/invocations"
          ]]},
          "RequestTemplates": {
            "application/json": {"Fn::Join": ["", [
              "#set($allParams = $input.params())\n",
              "{\n",
                "  \"requestParams\" : {\n",
                "    \"hostname\" : \"",
                {
                  "Fn::ImportValue": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ecs-main",
                      {"Ref": "Environment"},
                      "ServiceHostname"
                    ]]
                  }
                },
                "\",\n",
                "    \"port\" : \"",
                "80",
                "\",\n",
                "    \"path\" : \"$context.resourcePath\",\n",
                "    \"method\" : \"$context.httpMethod\"\n",
                "  },\n",
                "  \"bodyJson\" : $input.json('$'),\n",
                "  \"params\" : {\n",
                "    #foreach($type in $allParams.keySet())\n",
                "      #set($params = $allParams.get($type))\n",
                "      \"$type\" : {\n",
                "        #foreach($paramName in $params.keySet())\n",
                "          \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n",
                "          #if($foreach.hasNext),#end\n",
                "        #end\n",
                "      }\n",
                "      #if($foreach.hasNext),#end\n",
                "    #end\n",
                "  },\n",
                "  \"stage-variables\" : {\n",
                "    #foreach($key in $stageVariables.keySet())\n",
                "      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n",
                "      #if($foreach.hasNext),#end\n",
                "    #end\n",
                "  },\n",
                "  \"context\" : {\n",
                "    \"account-id\" : \"$context.identity.accountId\",\n",
                "    \"api-id\" : \"$context.apiId\",\n",
                "    \"api-key\" : \"$context.identity.apiKey\",\n",
                "    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n",
                "    \"caller\" : \"$context.identity.caller\",\n",
                "    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n",
                "    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n",
                "    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n",
                "    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n",
                "    \"http-method\" : \"$context.httpMethod\",\n",
                "    \"stage\" : \"$context.stage\",\n",
                "    \"source-ip\" : \"$context.identity.sourceIp\",\n",
                "    \"user\" : \"$context.identity.user\",\n",
                "    \"user-agent\" : \"$context.identity.userAgent\",\n",
                "    \"user-arn\" : \"$context.identity.userArn\",\n",
                "    \"request-id\" : \"$context.requestId\",\n",
                "    \"resource-id\" : \"$context.resourceId\",\n",
                "    \"resource-path\" : \"$context.resourcePath\"\n",
                "  }\n",
                "}\n"
            ]]}
          }
        }
      }
    },
    "EnvironmentModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "RestApiId": { "Ref": "RestAPI" },
        "ContentType": "application/json",
        "Description": "Schema environment variables.",
        "Name": "EnvironmentModel",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "EnvironmentModel",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "HOME": { "type": "string" },
              "HOSTNAME": { "type": "string" },
              "PATH": { "type": "string" },
              "RDS_READ_ENDPOINT": { "type": "string" },
              "RDS_WRITE_ENDPOINT": { "type": "string" }
            }
          }
        }
      }
    }
  },
  "Outputs": {
    "RestApiId": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "api",
            {"Ref": "Environment"},
            "RestApiId"
          ]]
        }
      },
      "Value": {
        "Ref": "RestAPI"
      }
    },
    "APIUserAccessKeyId": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "api",
            {"Ref": "Environment"},
            "APIUserAccessKeyId"
          ]]
        }
      },
      "Value": {
        "Fn::If": [
          "IsProd",
          "No IAM user credentials can access prod resources",
          {"Ref": "APIUserCredentials"}
        ]
      }
    },
    "APIUserNotSoSecretAccessKey": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "api",
            {"Ref": "Environment"},
            "APIUserNotSoSecretAccessKey"
          ]]
        }
      },
      "Value": {
        "Fn::If": [
          "IsProd",
          "No IAM user credentials can access prod resources",
          {"Fn::GetAtt": [
            "APIUserCredentials",
            "SecretAccessKey"
          ]}
        ]
      }
    }
  }
}
