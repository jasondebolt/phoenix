{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Deploys all lambda functions for this microservice.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/project-name"
    },
    "IAMRole": {
      "Description": "The role of your project.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/iam-role"
    },
    "Environment": {
      "Description": "The environment (dev, testing, prod, etc.) to deploy to.",
      "Type": "String"
    },
    "LambdaBucketName": {
      "Description": "The bucket name in which Lambda artifacts will be stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/lambda-bucket-name"
    },
    "VPCPrefix": {
      "Description": "The 'export' name prefix of the cloudformation stack for the VPC used by this service.",
      "Type": "String"
    },
    "Version": {
      "Description": "The identifier/version within the S3Key where the version of Lambda code intented to be deployed in this CloudFormation stack can be found (s3://bucket/{identifier}/foo/foo.py). In non-dev environments, this identifier may be v_{first 7 chars of git SHA1}. In dev, this may be a developers username. If nothing else, changes in this parameter value will update the stack.",
      "Type": "String"
    }
  },
  "Resources": {
    "LambdaVPCProxy": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.handler",
        "Role": "PHX_MACRO_IAM_ROLE",
        "MemorySize": 128,
        "Code": {
          "S3Bucket" : "PHX_MACRO_LAMBDA_BUCKET_NAME",
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "vpc_proxy",
            "lambda_function.zip"
          ]]}
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "LambdaVPCProxySecurityGroup"}
          ],
          "SubnetIds": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                {"Ref": "VPCPrefix"},
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                {"Ref": "VPCPrefix"},
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": "29"
      }
    },
    "LambdaVPCProxySecurityGroup": {
      "Properties": {
        "GroupDescription": "Lambda VPC proxy security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-vpcproxy-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "LambdaVPCProxyInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [ "LambdaVPCProxy", "Arn" ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "LambdaVPCProxyCloudWatchWarmer": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Periodically invokes the VPCProxy function to reduce initial response times.",
        "ScheduleExpression": "rate(5 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {"Fn::GetAtt": ["LambdaVPCProxy", "Arn"]},
            "Id": {"Ref": "AWS::StackName"},
            "Input": "{\"name\": \"pinger\"}"
          }
        ]
      }
    },
    "LambdaVPCProxyPermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "LambdaVPCProxyCloudWatchWarmer",
      "Properties": {
        "FunctionName": { "Ref": "LambdaVPCProxy" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["LambdaVPCProxyCloudWatchWarmer", "Arn"] }
      }
    },
    "DeleteVPCProxyNetworkInterfaceOnStackDelete": {
      "Type": "Custom::DeleteVPCProxyNetworkInterfaceOnStackDelete",
      "DependsOn": "LambdaDeleteNetworkInterface",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [ "LambdaDeleteNetworkInterface", "Arn" ]
        },
        "SecurityGroupId": {"Ref": "LambdaVPCProxySecurityGroup"}
      }
    },
    "LambdaDeleteNetworkInterface": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": "PHX_MACRO_IAM_ROLE",
        "Code": {
          "S3Bucket" : "PHX_MACRO_LAMBDA_BUCKET_NAME",
          "S3Key": {
            "Fn::Join": ["/", [
              {"Ref": "Version"},
              "delete_network_interface",
              "lambda_function.zip"
            ]]
          }
        },
        "Runtime": "python3.6",
        "Timeout": "120"
      }
    },
    "LambdaProjects": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": "PHX_MACRO_IAM_ROLE",
        "Code": {
          "S3Bucket" : "PHX_MACRO_LAMBDA_BUCKET_NAME",
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "projects",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "Timeout": "25"
      }
    },
    "LambdaProjectsInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [ "LambdaProjects", "Arn" ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    }
  },
  "Outputs": {
    "VPCProxyLambdaArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "lambda",
            {"Ref": "Environment"},
             "LambdaVPCProxyArn"
          ]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["LambdaVPCProxy", "Arn"]
      }
    },
    "VPCProxySecurityGroup": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "lambda",
            {"Ref": "Environment"},
             "LambdaVPCProxySecurityGroup"
          ]]
        }
      },
      "Value": {"Ref": "LambdaVPCProxySecurityGroup"}
    },
    "ProjectsLambdaArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "lambda",
            {"Ref": "Environment"},
             "LambdaProjectsArn"
          ]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["LambdaProjects", "Arn"]
      }
    }
  }
}
