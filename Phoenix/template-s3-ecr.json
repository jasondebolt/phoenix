{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Generates S3 buckets and ECR repositories for a microservice.",
  "Parameters": {
    "OrganizationName": {
      "Description": "The name of your organization.",
      "MinLength": "1",
      "MaxLength": "6",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (my-org) between 1 and 6 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "IAMRole": {
      "Description": "The IAM Role used to manage the pipeline stack.",
      "Type": "String"
    },
    "Version": {
      "Description": "The version associated with the Lambda function.",
      "Type": "String"
    }
  },
  "Resources": {
    "ECRMainRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "main"
          ]]
        },
        "LifecyclePolicy": {
          "LifecyclePolicyText": {"Fn::Join": ["", [
            "{",
            "  \"rules\": [",
            "    {",
            "      \"rulePriority\": 1,",
            "      \"description\": \"Remove if image count greater than 900\",",
            "      \"selection\": {",
            "        \"tagStatus\": \"any\",",
            "        \"countType\": \"imageCountMoreThan\",",
            "        \"countNumber\": 900",
            "      },",
            "      \"action\": {",
            "        \"type\": \"expire\"",
            "      }",
            "    }",
            "  ]",
            "}"
          ]]},
          "RegistryId": {
            "Ref": "AWS::AccountId"
          }
        },
        "RepositoryPolicyText": {
          "Version": "2008-10-17",
          "Statement": [{
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": {
                "AWS": [{"Ref": "IAMRole"}]
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ]
            },
            {
              "Sid": "CodeBuildAccess",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "ecr:*"
              ]
            }
          ]
        }
      }
    },
    "CodeBuildBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-build"]]},
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "CodePipelineBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-pipeline"]]},
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "LoadBalancerLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "load-balancer-logs"]]},
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "MicroserviceBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "microservice"]]
        }
      }
    },
    "CustomResourceDeleteS3Files": {
      "Type": "Custom::DeleteS3Files",
      "DependsOn": [
        "LambdaDeleteS3Files",
        "CodeBuildBucket",
        "CodePipelineBucket",
        "LoadBalancerLogsBucket",
        "MicroserviceBucket"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["LambdaDeleteS3Files", "Arn"]
        },
        "LambdaVersion": {"Ref": "Version"},
        "BucketNames": [
          {"Fn::Join": ["-", [ {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-build"]] },
          {"Fn::Join": ["-", [ {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-pipeline"]] },
          {"Fn::Join": ["-", [ {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "lambda"]] },
          {"Fn::Join": ["-", [ {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "load-balancer-logs"]] },
          {"Fn::Join": ["-", [ {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "microservice"]] }
        ]
      }
    },
    "LambdaDeleteS3Files": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": {"Ref": "IAMRole"},
        "Code": {
          "S3Bucket": {"Fn::Join": ["-", [
            {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "lambda"]]},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "delete_s3_files",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "Timeout": "60"
      }
    },
    "CustomResourceDeleteECRRepos": {
      "Type": "Custom::DeleteECRRepos",
      "DependsOn": [
        "LambdaDeleteECRRepos",
        "ECRMainRepository"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": ["LambdaDeleteECRRepos", "Arn"]
        },
        "LambdaVersion": {"Ref": "Version"},
        "ECRRepoNames": [
          {"Ref": "ECRMainRepository"}
        ]
      }
    },
    "LambdaDeleteECRRepos": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": {"Ref": "IAMRole"},
        "Code": {
          "S3Bucket": {"Fn::Join": ["-", [
            {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "lambda"]]},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "delete_ecr_repos",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "Timeout": "60"
      }
    }
  },
  "Outputs": {
    "LambdaDeleteS3FilesArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "s3-ecr",
            "LambdaDeleteS3FilesArn"
          ]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["LambdaDeleteS3Files", "Arn"]
      }
    }
  }
}
