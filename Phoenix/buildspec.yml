version: 0.2

phases:
  install:
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay&
      #- timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
      - timeout 15s sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      - # We set AWS_ACCOUNT_ID as an enviornment variable in the CloudFormation template which creates this CodeBuild job.
      - # We assume that the region that the CodeBuild nodes are running (AWS_DEFAULT_REGION) is the same as all other stack resource.
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - PROJECT_NAME=`jq -r '.Parameters.ProjectName' $CODEBUILD_SRC_DIR/Phoenix/template-microservice-params.json`
      - PRE_LAMBDA_BUCKET_NAME=`jq -r '.Parameters.LambdaBucketName' $CODEBUILD_SRC_DIR/Phoenix/template-microservice-params.json`
      - LAMBDA_BUCKET_NAME=`sed "s/PROJECT_NAME/$PROJECT_NAME/g" <<< $PRE_LAMBDA_BUCKET_NAME`
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$PROJECT_NAME
      - VERSION_ID=v_$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=$VERSION_ID
  build:
    commands:
      - echo Build started on `date`
      - # Database (Aurora, DynamoDB)
      - echo ===== DATABASE BUILD =====
      - echo replacing VERSION_ID in the database params files.
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-database-params-testing.json > $CODEBUILD_SRC_DIR/t-database-params-testing.json_temp
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-database-params-prod.json > $CODEBUILD_SRC_DIR/t-database-params-prod.json_temp
      - echo replacing PROJECT_NAME and other params in the database params files.
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/t-database-params-testing.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-database-params-testing.json
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/t-database-params-prod.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-database-params-prod.json
      - cp $CODEBUILD_SRC_DIR/Phoenix/template-database.json $CODEBUILD_SRC_DIR
      - # Docker/ECS
      - echo ===== DOCKER BUILD =====
      - echo replacing build number in the task definition param files.
      - sed "s/IMAGE_TAG/$IMAGE_TAG/g" $CODEBUILD_SRC_DIR/Phoenix/template-ecs-params-testing.json > $CODEBUILD_SRC_DIR/t-ecs-params-testing.json_temp
      - sed "s/IMAGE_TAG/$IMAGE_TAG/g" $CODEBUILD_SRC_DIR/Phoenix/template-ecs-params-prod.json > $CODEBUILD_SRC_DIR/t-ecs-params-prod.json_temp
      - echo replacing PROJECT_NAME and other params in the task definition params files.
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/t-ecs-params-testing.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-ecs-params-testing.json
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/t-ecs-params-prod.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-ecs-params-prod.json
      - cp $CODEBUILD_SRC_DIR/Phoenix/template-ecs.json $CODEBUILD_SRC_DIR
      - echo Building the Docker image from the Dockerfile.
      - docker build -t $REPOSITORY_URI:latest $CODEBUILD_SRC_DIR/Phoenix/ecs
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      - # Lambda
      - echo ===== LAMBDA BUILD =====
      - echo replacing VERSION_ID in the lambda params files.
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-lambda-params-testing.json > $CODEBUILD_SRC_DIR/t-lambda-params-testing.json_temp
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-lambda-params-prod.json > $CODEBUILD_SRC_DIR/t-lambda-params-prod.json_temp
      - echo replacing PROJECT_NAME and other params in the lambda params files.
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/template-lambda-params-testing.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-lambda-params-testing.json
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/template-lambda-params-prod.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-lambda-params-prod.json
      - cp $CODEBUILD_SRC_DIR/Phoenix/template-lambda.json $CODEBUILD_SRC_DIR
      - # Upload the Lambda functions
      - listOfLambdaFunctions='projects password_generator'
      - |-
        for functionName in $listOfLambdaFunctions
        do
          mkdir -p $CODEBUILD_SRC_DIR/Phoenix/builds/$functionName
          cp -rf $CODEBUILD_SRC_DIR/Phoenix/lambda/$functionName/* $CODEBUILD_SRC_DIR/Phoenix/builds/$functionName/
          cd $CODEBUILD_SRC_DIR/Phoenix/builds/$functionName/
          pip install -r requirements.txt -t .
          zip -r lambda_function.zip ./*
          aws s3 cp lambda_function.zip s3://$LAMBDA_BUCKET_NAME/$VERSION_ID/$functionName/
          cd $CODEBUILD_SRC_DIR
          rm -rf $CODEBUILD_SRC_DIR/Phoenix/builds
        done
      - # API Gateway (Changes current API at HEAD, but does not deploy the API distrubtion to the API Endpoint)
      - echo ===== API GATEWAY BUILD =====
      - echo replacing VERSION_ID in the api params files.
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-api-params-testing.json > $CODEBUILD_SRC_DIR/t-api-params-testing.json_temp
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-api-params-prod.json > $CODEBUILD_SRC_DIR/t-api-params-prod.json_temp
      - echo replacing PROJECT_NAME and other params in the api params files.
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/template-api-params-testing.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-api-params-testing.json
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/template-api-params-prod.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-api-params-prod.json
      - cp $CODEBUILD_SRC_DIR/Phoenix/template-api.json $CODEBUILD_SRC_DIR
      - # API Gateway Deployment (Deploys the current API configuration to the API Endpoint)
      - echo ===== API GATEWAY DEPLOYMENT BUILD =====
      - echo replacing VERSION_ID in the api deployment params files.
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-api-deployment-params-testing.json > $CODEBUILD_SRC_DIR/t-api-deployment-params-testing.json_temp
      - sed "s/VERSION_ID/$VERSION_ID/g" $CODEBUILD_SRC_DIR/Phoenix/template-api-deployment-params-prod.json > $CODEBUILD_SRC_DIR/t-api-deployment-params-prod.json_temp
      - echo replacing PROJECT_NAME and other params in the api deployment params files.
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/template-api-deployment-params-testing.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-api-deployment-params-testing.json
      - python parameters_generator.py $CODEBUILD_SRC_DIR/Phoenix/template-api-deployment-params-prod.json_temp codepipeline > $CODEBUILD_SRC_DIR/t-api-deployment-params-prod.json
      - # Get the current API Gateway Deployment template from the stack, compare, and generate a new template.
      - # We need to generate 2 differnt templates (NOT param templates) for testing and prod.
      - # The reason for this is because these two templates will actually have different numbers of API deployment resources.
      - python $CODEBUILD_SRC_DIR/Phoenix/api_gateway_deployment_rotator.py $CODEBUILD_SRC_DIR/Phoenix/template-api-deployment-params-testing.json > $CODEBUILD_SRC_DIR/template-api-deployment-testing.json
      - python $CODEBUILD_SRC_DIR/Phoenix/api_gateway_deployment_rotator.py $CODEBUILD_SRC_DIR/Phoenix/template-api-deployment-params-prod.json > $CODEBUILD_SRC_DIR/template-api-deployment-prod.json
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
artifacts:
    files:
      - # Database (Aurora, DynamoDB)
      - template-database.json
      - t-database-params-testing.json
      - t-database-params-prod.json
      - # Docker/ECS
      - template-ecs.json
      - t-ecs-params-testing.json
      - t-ecs-params-prod.json
      - # Lambda
      - template-lambda.json
      - t-lambda-params-testing.json
      - t-lambda-params-prod.json
      - # API Gateway
      - template-api.json
      - t-api-params-testing.json
      - t-api-params-prod.json
      - # API Gateway Deployment
      - template-api-deployment-testing.json
      - template-api-deployment-prod.json
      - t-api-deployment-params-testing.json
      - t-api-deployment-params-prod.json
