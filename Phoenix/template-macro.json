{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Deploys a CloudFormation Macro Lambda for template post-processing",
  "Parameters": {
    "OrganizationName": {
      "Description": "The name of your organization.",
      "MinLength": "1",
      "MaxLength": "6",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (my-org) between 1 and 6 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "GitRepoName": {
      "Description": "The name of the git repo for this project.",
      "Type": "String"
    },
    "GitRootProjectBranch": {
      "Description": "The main git branch associated with your main pipeline (i.e master, main, etc.)",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "GitCurrentProjectBranch": {
      "Description": "The actual git branch associated with your current pipeline for this project (i.e demo, green, etc.). May be same branch as your GitRootProjectBranch.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "CodeBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with.",
      "Default": "aws/codebuild/ubuntu-base:14.04",
      "Type": "String"
    },
    "NodeJSBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with.",
      "Default": "aws/codebuild/nodejs:10.1.0",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain name that this service will fall under.",
      "Type": "String"
    },
    "SSLCertificateARN": {
      "Description": "The AWS ACM Certificate ARN.",
      "Type": "String"
    },
    "ECSSSLCertificateARN": {
      "Description": "The AWS ACM Certificate ARN used by ECS tasks.",
      "Type": "String"
    },
    "APIDocsSSLCertificateARN": {
      "Description": "The AWS ACM Certificate ARN used by API documentation.",
      "Type": "String"
    },
    "HostedZoneId": {
      "Description": "The Route53 hosted zone id that this service will fall under.",
      "Type": "String"
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
    },
    "ProjectDescription": {
      "Description": "A description of your project",
      "Type": "String"
    },
    "NotificationEmail": {
      "Description": "The email to send notifications to for this microservice",
      "Type": "String"
    },
    "IAMRole": {
      "Description": "The IAM role that has access to all of the projects resources.",
      "Type": "String"
    },
    "GitlabURL": {
      "Description": "The Gitlab URL of your organization (i.e https://gitlab.yourcompany.com)",
      "Type": "String"
    },
    "Version": {
      "Description": "The identifier/version within the S3Key where the version of Lambda code intented to be deployed in this CloudFormation stack can be found (s3://bucket/{identifier}/foo/foo.py). In non-dev environments, this identifier may be v_{first 7 chars of git SHA1}. In dev, this may be a developers username. If nothing else, changes in this parameter value will update the stack.",
      "Type": "String"
    }
  },
  "Resources": {
    "ProjectLambdaMacro": {
      "Type" : "AWS::CloudFormation::Macro",
      "DependsOn": "LambdaMacro",
      "Properties" : {
        "Name" : "ProjectLambdaMacro",
        "Description" : "Lambda CloudFormation Macro",
        "FunctionName" : {"Fn::GetAtt": ["LambdaMacro", "Arn"]},
        "LogGroupName" : {"Ref": "LogGroup"},
        "LogRoleARN" : {"Ref": "IAMRole"}
      }
    },
    "LogGroup": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join": ["", [
          {"Ref": "ProjectName"},
          "LambdaMacroLogGroup"
        ]]},
        "RetentionInDays" : 120
      }
    },
    "LambdaMacro": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": {"Ref": "IAMRole"},
        "Environment": {
          "Variables": {
            "PHX_MACRO_ORGANIZATION_NAME": {"Ref": "OrganizationName"},
            "PHX_MACRO_PROJECT_NAME": {"Ref": "ProjectName"},
            "PHX_MACRO_GIT_REPO_NAME": {"Ref": "GitRepoName"},
            "PHX_MACRO_GIT_ROOT_PROJECT_BRANCH": {"Ref": "GitRootProjectBranch"},
            "PHX_MACRO_GIT_CURRENT_PROJECT_BRANCH": {"Ref": "GitCurrentProjectBranch"},
            "PHX_MACRO_DOMAIN": {"Ref": "Domain"},
            "PHX_MACRO_HOSTED_ZONE_ID": {"Ref": "HostedZoneId"},
            "PHX_MACRO_SSL_CERTIFICATE_ARN": {"Ref": "SSLCertificateARN"},
            "PHX_MACRO_ECS_SSL_CERTIFICATE_ARN": {"Ref": "ECSSSLCertificateARN"},
            "PHX_MACRO_API_DOCS_SSL_CERTIFICATE_ARN": {"Ref": "APIDocsSSLCertificateARN"},
            "PHX_MACRO_KEY_PAIR_NAME": {"Ref": "KeyPairName"},
            "PHX_MACRO_PROJECT_DESCRIPTION": {"Ref": "ProjectDescription"},
            "PHX_MACRO_NOTIFICATION_EMAIL": {"Ref": "NotificationEmail"},
            "PHX_MACRO_IAM_ROLE": {"Ref": "IAMRole"},
            "PHX_MACRO_CODE_BUILD_DOCKER_IMAGE": {"Ref": "CodeBuildDockerImage"},
            "PHX_MACRO_NODEJS_BUILD_DOCKER_IMAGE": {"Ref": "NodeJSBuildDockerImage"},
            "PHX_MACRO_GITLAB_URL": {"Ref": "GitlabURL"},
            "PHX_MACRO_CODE_BUILD_BUCKET_NAME": {"Fn::Join": ["-", [
              {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-build"]]},
            "PHX_MACRO_CODE_PIPELINE_BUCKET_NAME": {"Fn::Join": ["-", [
              {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-pipeline"]]},
            "PHX_MACRO_LAMBDA_BUCKET_NAME": {"Fn::Join": ["-", [
              {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "lambda"]]},
            "PHX_MACRO_LOAD_BALANCER_LOGS_BUCKET_NAME": {"Fn::Join": ["-", [
              {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "load-balancer-logs"]]},
            "PHX_MACRO_MICROSERVICE_BUCKET_NAME": {"Fn::Join": ["-", [
              {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "microservice"]]},
            "PHX_MACRO_SSM_PROJECT_NAME_ROOT": {"Fn::Join": ["/", [
              "/microservice", {"Ref": "ProjectName"}]]
            }
          }
        },
        "Code": {
          "S3Bucket" : {"Fn::Join": ["-", [
            {"Ref": "OrganizationName"},
            {"Ref": "ProjectName"},
            "lambda"
          ]]},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "macro",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "Timeout": "25"
      }
    }
  },
  "Outputs": {
    "MacroLambdaArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "lambda",
             "LambdaMacroArn"
          ]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["LambdaMacro", "Arn"]
      }
    }
  }
}
