{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Deploys global project specific SSM parameters and a CloudFormation Macro Lambda for template post-processing",
  "Parameters": {
    "OrganizationName": {
      "Description": "The name of your organization.",
      "MinLength": "1",
      "MaxLength": "6",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (my-org) between 1 and 6 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "GitRepoName": {
      "Description": "The name of the git repo for this project.",
      "Type": "String"
    },
    "GitRootProjectBranch": {
      "Description": "The main git branch associated with your main pipeline (i.e master, main, etc.)",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "GitCurrentProjectBranch": {
      "Description": "The actual git branch associated with your current pipeline for this project (i.e demo, green, etc.). May be same branch as your GitRootProjectBranch.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "GitHubOrganization": {
      "Description": "If using GitHub, this is the name of your organization",
      "Type": "String"
    },
    "CodeBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with.",
      "Default": "aws/codebuild/ubuntu-base:14.04",
      "Type": "String"
    },
    "NodeJSBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with.",
      "Default": "aws/codebuild/nodejs:10.1.0",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain name that this service will fall under.",
      "Type": "String"
    },
    "HostedZoneId": {
      "Description": "The Route53 hosted zone id that this service will fall under.",
      "Type": "String"
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
    },
    "ProjectDescription": {
      "Description": "A description of your project",
      "Type": "String"
    },
    "NotificationEmail": {
      "Description": "The email to send notifications to for this microservice",
      "Type": "String"
    },
    "IAMRole": {
      "Description": "The IAM role that has access to all of the projects resources.",
      "Type": "String"
    },
    "GitURL": {
      "Description": "The Git URL of your organization (i.e https://gitlab.yourcompany.com, https://github.com, etc.)",
      "Type": "String"
    },
    "PipelineEnvironments": {
      "Description": "The list of pipeline environments in the main project pipeline.",
      "Type": "String"
    },
    "ReleaseEnvironments": {
      "Description": "The list of isolated release environments with associated pipelines that are not part of the main pipeline and can be created in parallel.",
      "Type": "String"
    },
    "Version": {
      "Description": "The identifier/version within the S3Key where the version of Lambda code intented to be deployed in this CloudFormation stack can be found (s3://bucket/{identifier}/foo/foo.py). In non-dev environments, this identifier may be v_{first 7 chars of git SHA1}. In dev, this may be a developers username. If nothing else, changes in this parameter value will update the stack.",
      "Type": "String"
    }
  },
  "Conditions": {
    "EmptyReleaseEnvironments": {
      "Fn::Equals": [ {"Ref": "ReleaseEnvironments"}, "" ]
    },
    "EmptyPipelineEnvironments": {
      "Fn::Equals": [ {"Ref": "PipelineEnvironments"}, "" ]
    }
  },
  "Resources": {
    "ProjectLambdaMacro": {
      "Type" : "AWS::CloudFormation::Macro",
      "DependsOn": "LambdaMacro",
      "Properties" : {
        "Name" : "ProjectLambdaMacro",
        "Description" : "Lambda CloudFormation Macro",
        "FunctionName" : {"Fn::GetAtt": ["LambdaMacro", "Arn"]},
        "LogGroupName" : {"Ref": "LogGroup"},
        "LogRoleARN" : {"Ref": "IAMRole"}
      }
    },
    "LogGroup": {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {"Fn::Join": ["", [
          {"Ref": "ProjectName"},
          "LambdaMacroLogGroup"
        ]]},
        "RetentionInDays" : 120
      }
    },
    "LambdaMacro": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": {"Ref": "IAMRole"},
        "Environment": {
          "Variables": {
            "PHX_MACRO_PROJECT_NAME": {"Ref": "ProjectName"}
          }
        },
        "Code": {
          "S3Bucket" : {"Fn::Join": ["-", [
            {"Ref": "OrganizationName"},
            {"Ref": "ProjectName"},
            "lambda"
          ]]},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "macro",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "Timeout": "25"
      }
    },
    "MacroVersion": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/macro-stack-version"]]},
        "Type": "String",
        "Value": {"Ref": "Version"},
        "Description": "The version of latest deployed Macro cloudformation stack."
      }
    },
    "OrganizationNameParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/organization-name"]]},
        "Type": "String",
        "Value": {"Ref": "OrganizationName"},
        "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
        "Description": "The organization name associated with this account"
      }
    },
    "ProjectNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "OrganizationNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/project-name"]]},
        "Type": "String",
        "Value": {"Ref": "ProjectName"},
        "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
        "Description": "The microservice name associated with this account"
      }
    },
    "GitRepoNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "ProjectNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/git-repo-name"]]},
        "Type": "String",
        "Value": {"Ref": "GitRepoName"},
        "Description": "The name of the git repo used by this project."
      }
    },
    "GitRootProjectBranchParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "GitRepoNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/git-root-project-branch"]]},
        "Type": "String",
        "Value": {"Ref": "GitRootProjectBranch"},
        "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
        "Description": "The main git branch associated with your main pipeline (i.e master, main, etc.)"
      }
    },
    "GitCurrentProjectBranchParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "GitRootProjectBranchParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/git-current-project-branch"]]},
        "Type": "String",
        "Value": {"Ref": "GitCurrentProjectBranch"},
        "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
        "Description": "The actual git branch associated with your current pipeline for this project (i.e demo, green, etc.). May be same branch as your GitRootProjectBranch."
      }
    },
    "GitHubOrganizationParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "GitRootProjectBranchParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/github/organization"]]},
        "Type": "String",
        "Value": {"Ref": "GitHubOrganization"},
        "Description": "If using GitHub, this is the name of your GitHub organization."
      }
    },
    "CodeBuildDockerImageParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "GitRootProjectBranchParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/code-build-docker-image"]]},
        "Type": "String",
        "Value": {"Ref": "CodeBuildDockerImage"},
        "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with."
      }
    },
    "NodeJSBuildDockerImageParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "GitRootProjectBranchParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/code-build-docker-image-nodejs"]]},
        "Type": "String",
        "Value": {"Ref": "NodeJSBuildDockerImage"},
        "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with."
      }
    },
    "CodeBuildBucketNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "GitRootProjectBranchParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/code-build-bucket-name"]]},
        "Type": "String",
        "Value": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-build"]]},
        "Description": "The bucket name in which CodeBuild artifacts will be stored."
      }
    },
    "CodePipelineBucketNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "CodeBuildBucketNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/code-pipeline-bucket-name"]]},
        "Type": "String",
        "Value": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "code-pipeline"]]},
        "Description": "The bucket name in which CodePipeline artifacts will be stored."
      }
    },
    "MicroserviceBucketNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "CodeBuildBucketNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/bucket-name"]]},
        "Type": "String",
        "Value": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "microservice"]]},
        "Description": "The bucket name in which cloudformation templates and lambda functions will be stored."
      }
    },
    "DomainParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "CodeBuildBucketNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/domain"]]},
        "Type": "String",
        "Value": {"Ref": "Domain"},
        "Description": "The domain name that this service will fall under."
      }
    },
    "HostedZoneIdParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "CodeBuildBucketNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/hosted-zone-id"]]},
        "Type": "String",
        "Value": {"Ref": "HostedZoneId"},
        "Description": "The Route53 hosted zone id that this service will fall under."
      }
    },
    "GitURLParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "DomainParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/git-url"]]},
        "Type": "String",
        "Value": {"Ref": "GitURL"},
        "Description": "The Git URL."
      }
    },
    "PipelineEnvironmentsParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "DomainParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/pipeline-environments"]]},
        "Type": "String",
        "Value": {"Fn::If": [
          "EmptyPipelineEnvironments",
          " ",
          {"Ref": "PipelineEnvironments"}
        ]},
        "Description": "The list of pipeline environments in the main project pipeline."
      }
    },
    "ReleaseEnvironmentsParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "DomainParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/release-environments"]]},
        "Type": "String",
        "Value": {"Fn::If": [
          "EmptyReleaseEnvironments",
          " ",
          {"Ref": "ReleaseEnvironments"}
        ]},
        "Description": "The list of isolated release environments with associated pipelines that are not part of the main pipeline and can be created in parallel."
      }
    },
    "KeyPairNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "DomainParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/key-pair-name"]]},
        "Type": "String",
        "Value": {"Ref": "KeyPairName"},
        "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
      }
    },
    "LambdaBucketNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "KeyPairNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/lambda-bucket-name"]]},
        "Type": "String",
        "Value": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "lambda"]]},
        "Description": "The bucket name in which Lambda artifacts will be stored."
      }
    },
    "LoadBalancerLogsBucketNameParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "KeyPairNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/load-balancer-logs-bucket-name"]]},
        "Type": "String",
        "Value": {"Fn::Join": ["-", [
          {"Ref": "OrganizationName"}, {"Ref": "ProjectName"}, "load-balancer-logs"]]},
        "Description": "The bucket name in which load balancer logs will be stored."
      }
    },
    "ProjectDescriptionParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "KeyPairNameParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/project-description"]]},
        "Type": "String",
        "Value": {"Ref": "ProjectDescription"},
        "Description": "A description of your project."
      }
    },
    "NotificationEmailParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "ProjectDescriptionParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/notification-email"]]},
        "Type": "String",
        "Value": {"Ref": "NotificationEmail"},
        "Description": "The email to send notifications to for this microservice"
      }
    },
    "IAMRoleParam": {
      "Type": "AWS::SSM::Parameter",
      "DependsOn": "ProjectDescriptionParam",
      "Properties": {
        "Name": {"Fn::Join": ["/", ["/microservice", {"Ref": "ProjectName"}, "global/iam-role"]]},
        "Type": "String",
        "Value": {"Ref": "IAMRole"},
        "Description": "The IAM role that has access to all of the projects resources."
      }
    }
  },
  "Outputs": {
    "LambdaMacroArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "lambda",
             "LambdaMacroArn"
          ]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["LambdaMacro", "Arn"]
      }
    }
  }
}
