{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Generates EC2 resources, some of which may run one or more ECS tasks/services in a given environment.",
  "Transform" : ["ProjectLambdaMacro"],
  "Parameters": {
    "Environment": {
      "Description": "The environment to deploy the instance to.",
      "Type": "String"
    },
    "DBEnvironment": {
      "Description": "The database environment used by this ECS cluster",
      "Type": "String"
    },
    "LaunchType": {
      "Description": "ECS Launch Type",
      "AllowedValues": ["FARGATE", "EC2"],
      "Default": "FARGATE",
      "Type": "String"
    },
    "WebSubnets": {
      "Description": "The type of subnets to place this web service in.",
      "AllowedValues": ["Public", "Private"],
      "Default": "Public",
      "Type": "String"
    },
    "VPCPrefix": {
      "Description": "The 'export' name prefix of the cloudformation stack for the VPC used by this service.",
      "Type": "String"
    },
    "DesiredECSInstances": {
      "Type":"Number",
      "Default":"1",
      "Description":"Number of ECS instances to launch in your ECS cluster for this service. Your instance may be shared with other services in the cluster."
    },
    "MinECSInstances": {
      "Type":"Number",
      "Default":"1",
      "Description":"Minimum number of instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster."
    },
    "MaxECSInstances": {
      "Type":"Number",
      "Default":"1",
      "Description":"Maximum number of instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster."
    },
    "InstanceType": {
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"c4.large",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription":"Reserved instances. Please choose a valid instance type from our reserved instance types."
    }
  },
  "Mappings":{
    "RegionalConfigs":{
      "us-east-1":{
        "AMIID":"ami-aff65ad2",
        "ELBAccountId": "127311923021"
      },
      "us-east-2":{
        "AMIID":"ami-64300001",
        "ELBAccountId": "033677994240"
      },
      "us-west-1":{
        "AMIID":"ami-69677709",
        "ELBAccountId": "027434742980"
      },
      "us-west-2":{
        "AMIID":"ami-40ddb938",
        "ELBAccountId": "797873946194"
      },
      "eu-west-1":{
        "AMIID":"ami-2d386654",
        "ELBAccountId": "156460612806"
      },
      "eu-central-1":{
        "AMIID":"ami-9fc39c74",
        "ELBAccountId": "054676820928"
      },
      "ap-northeast-1":{
        "AMIID":"ami-a99d8ad5",
        "ELBAccountId": "582318560864"
      },
      "ap-southeast-1":{
        "AMIID":"ami-846144f8",
        "ELBAccountId": "114774131450"
      },
      "ap-southeast-2":{
        "AMIID":"ami-efda148d",
        "ELBAccountId": "783225319266"
      }
    }
  },
  "Conditions": {
    "IsFargate" : {"Fn::Equals" : [
      {"Ref" : "LaunchType"}, "FARGATE"
    ]}
  },
  "Resources": {
    "Cluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {"Fn::Join": ["-", [
          "PHX_MACRO_PROJECT_NAME",
          {"Ref": "Environment"}
        ]]}
      }
    },
    "TaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ]
      }
    },
    "ApplicationELBSG": {
      "Properties": {
        "GroupDescription": "Application ELB security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-elb-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ECSAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }}
        ],
        "LaunchConfigurationName": {
          "Ref": "ContainerInstances"
        },
        "MinSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MinECSInstances" }
          ]
        },
        "MaxSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MaxECSInstances" }
          ]
        },
        "DesiredCapacity": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "DesiredECSInstances" }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              { "Ref": "Cluster"},
              "ECSInstance"
            ]]},
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Fn::If": [
            "IsFargate",
            { "Ref" : "AWS::NoValue" },
            { "Timeout": "PT15M" }
          ]
        }
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "ContainerInstances":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "ImageId":{
          "Fn::FindInMap":[
            "RegionalConfigs",
            {
              "Ref":"AWS::Region"
            },
            "AMIID"
          ]
        },
        "SecurityGroups": [{
          "Ref": "WebSG"
        }],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName": "PHX_MACRO_KEY_PAIR_NAME",
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "Cluster"
                },
                " >> /etc/ecs/ecs.config\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                "         --resource ECSAutoScalingGroup ",
                "         --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ec2-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":["*"],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EC2Role"
          }
        ]
      }
    },
    "ELBToELB": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WorldHttpsToELB": {
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "443",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "IpProtocol": "tcp",
        "ToPort": "443"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebToWeb": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MainVPCToWeb": {
      "Properties": {
        "FromPort": "-1",
        "CidrIp": "10.0.0.0/16",
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MainVPCToELB": {
      "Properties": {
        "FromPort": "-1",
        "CidrIp": "10.0.0.0/16",
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ELBToWeb": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebSG": {
      "Properties": {
        "GroupDescription": "Web security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-web-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "CodeBuildAPIDocumentation": {
      "Type": "AWS::CodeBuild::Project",
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "WebSG"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                {"Ref": "VPCPrefix"},
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                {"Ref": "VPCPrefix"},
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                {"Ref": "VPCPrefix"},
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": "PHX_MACRO_CODE_BUILD_BUCKET_NAME",
          "NamespaceType": "BUILD_ID",
          "Name": "PHX_MACRO_PROJECT_NAME",
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [
              "PHX_MACRO_CODE_BUILD_BUCKET_NAME",
              "/",
              "PHX_MACRO_PROJECT_NAME",
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": "PHX_MACRO_PROJECT_NAME",
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            },
            {
              "Name" : "ENVIRONMENT",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "Environment"}
            },
            {
              "Name" : "PROJECT_NAME",
              "Type" : "PLAINTEXT",
              "Value" : "PHX_MACRO_PROJECT_NAME"
            },
            {
              "Name" : "DOMAIN",
              "Type" : "PLAINTEXT",
              "Value" : "PHX_MACRO_DOMAIN"
            }
          ],
          "Image": "PHX_MACRO_CODE_BUILD_DOCKER_IMAGE_NODEJS",
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "api-documentation",
            {"Ref": "Environment"}
          ]]
        },
        "ServiceRole": {"Fn::Join": ["", [
          "{{resolve:ssm:",
          "/microservice/",
          "PHX_MACRO_PROJECT_NAME",
          "/global/code-build-service-role-arn",
          ":1}}"
        ]]},
        "Source": {
          "BuildSpec": "Phoenix/buildspec-api-documentation.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              "PHX_MACRO_PROJECT_NAME"
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    }
  },
  "Outputs": {
    "Cluster": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "ec2",
            {"Ref": "Environment"},
            "Cluster"
          ]]
        }
      },
      "Value": {"Ref": "Cluster"}
    },
    "TaskExecutionRoleArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "ec2",
            {"Ref": "Environment"},
            "TaskExecutionRoleArn"
          ]]
        }
      },
      "Value": {"Fn::GetAtt": ["TaskExecutionRole", "Arn"]}
    },
    "ApplicationELBSG": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "ec2",
            {"Ref": "Environment"},
            "ApplicationELBSG"
          ]]
        }
      },
      "Value": {"Ref": "ApplicationELBSG"}
    },
    "WebSG": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            "PHX_MACRO_PROJECT_NAME",
            "ec2",
            {"Ref": "Environment"},
            "WebSG"
          ]]
        }
      },
      "Value": {"Ref": "WebSG"}
    }
  }
}
