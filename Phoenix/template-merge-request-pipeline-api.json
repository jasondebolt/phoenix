{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Deploys an API Gateway endpoint that GitLab merge request events can invoke to setup/teardown a review pipeline.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "__microservice-phoenix-project-name"
    },
    "LambdaBucketName": {
      "Description": "The bucket name in which versioned lambda functions are stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "__microservice-phoenix-lambda-bucket-name"
    },
    "Environment": {
      "Description": "The environment (dev, testing, prod, etc.) to deploy to.",
      "Type": "String",
      "Default": "all"
    },
    "Version": {
      "Description": "The identifier/version associated with this API.",
      "Type": "String"
    }
  },
  "Resources": {
    "Latest": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["MergeRequestsPost"],
      "Properties": {
        "RestApiId": {"Ref": "RestAPI"},
        "Description": "Description here",
        "StageDescription": {
          "Description": "Stage Description",
          "LoggingLevel": "INFO",
          "MetricsEnabled": "true",
          "Variables": {
            "TestKey": "hello"
          }
        },
        "StageName": {
          "Fn::Join": [
            "_",
            [
              {
                "Ref": "Environment"
              },
              {"Ref": "Version"}
            ]
          ]
        }
      }
    },
    "RestAPI": {
      "Type" : "AWS::ApiGateway::RestApi",
      "Properties" : {
        "Description" : {"Fn::Join": ["", [
          "The ",
          { "Ref": "ProjectName" },
          " GitLab Merge Request ",
          " REST API (Release Candidate ",
          {"Ref": "Version"},
          ")"
        ]]},
        "Name" : { "Fn::Join": ["-",  [
          { "Ref": "ProjectName" },
          "api",
          "mergerequests",
          { "Ref": "Environment" }
        ]]}
      }
    },
    "MergeRequestsResource": {
      "Type" : "AWS::ApiGateway::Resource",
      "Properties" : {
        "ParentId" : { "Fn::GetAtt": ["RestAPI", "RootResourceId"] },
        "PathPart" : "MergeRequests",
        "RestApiId" : { "Ref": "RestAPI" }
      }
    },
    "MergeRequestsPost": {
      "Type" : "AWS::ApiGateway::Method",
      "DependsOn": ["LambdaMergeRequests"],
      "Properties" : {
        "RestApiId" : { "Ref": "RestAPI" },
        "AuthorizationType" : "CUSTOM",
        "AuthorizerId": {"Ref": "ApiGatewayCustomLambdaAuth"},
        "HttpMethod": "POST",
        "ResourceId" : { "Ref": "MergeRequestsResource" },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": false
            }
          }
        ],
        "Integration": {
          "Type" : "AWS",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [
            {
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates" : { "application/json": "" },
              "StatusCode" : "200"
            }
          ],
          "Uri": {"Fn::Join": ["", [
            "arn:aws:apigateway:",
            { "Ref": "AWS::Region" },
            ":lambda:path/2015-03-31/functions/",
            { "Fn::GetAtt": [
              "LambdaMergeRequests",
              "Arn"
            ]},
            "/invocations"
          ]]}
        }
      }
    },
    "LambdaSG": {
      "Properties": {
        "GroupDescription": "Merge Request Lambda Security Group",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-lambda-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": "dev-vpc-VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "LambdaMergeRequests": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": ["LambdaRole", "LambdaRolePolicy", "LambdaSG"],
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": { "Fn::GetAtt" : ["LambdaRole", "Arn"] },
        "Code": {
          "S3Bucket" : {"Ref": "LambdaBucketName"},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "mergerequests",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "LambdaSG"}
          ],
          "SubnetIds" : [
            {"Fn::ImportValue": "dev-vpc-PrivateSubnetAZ1"},
            {"Fn::ImportValue": "dev-vpc-PrivateSubnetAZ2"}
          ]
        },
        "Timeout": "25"
      }
    },
    "LambdaMergeRequestsInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [ "LambdaMergeRequests", "Arn" ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "LambdaRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "s3.amazonaws.com",
                  "apigateway.amazonaws.com",
                  "codepipeline.amazonaws.com",
                  "codebuild.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaRolePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:*",
                "dynamodb:*",
                "cloudformation:*",
                "codepipeline:*",
                "codebuild:*",
                "s3:*",
                "ec2:*",
                "ssm:*",
                "kms:*",
                "logs:*",
                "xray:*",
                "sts:AssumeRole",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:PutRolePolicy",
                "iam:CreateRole",
                "iam:PassRole",
                "iam:GetRole"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": { "Fn::Join": ["-", [
          { "Ref": "ProjectName"},
          "APILambdaRole"
        ]]},
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "LambdaPostMergeRequestSG": {
      "Properties": {
        "GroupDescription": "Post Merge Request Lambda Security Group",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-post-mr-lambda-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": "dev-vpc-VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "LambdaPostMergeRequest": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": ["LambdaPostMergeRequestRole", "LambdaPostMergeRequestRolePolicy", "LambdaPostMergeRequestSG"],
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": { "Fn::GetAtt" : ["LambdaPostMergeRequestRole", "Arn"] },
        "Code": {
          "S3Bucket" : {"Ref": "LambdaBucketName"},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "post_mergerequests",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python3.6",
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "LambdaPostMergeRequestSG"}
          ],
          "SubnetIds" : [
            {"Fn::ImportValue": "dev-vpc-PrivateSubnetAZ1"},
            {"Fn::ImportValue": "dev-vpc-PrivateSubnetAZ2"}
          ]
        },
        "Timeout": "25"
      }
    },
    "LambdaPostMergeRequestInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [ "LambdaPostMergeRequest", "Arn" ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "codepipeline.amazonaws.com"
      }
    },
    "LambdaPostMergeRequestRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "s3.amazonaws.com",
                  "apigateway.amazonaws.com",
                  "codepipeline.amazonaws.com",
                  "codebuild.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaPostMergeRequestRolePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:*",
                "dynamodb:*",
                "cloudformation:*",
                "codepipeline:*",
                "codebuild:*",
                "s3:*",
                "ec2:*",
                "ssm:*",
                "kms:*",
                "logs:*",
                "xray:*",
                "sts:AssumeRole",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:PutRolePolicy",
                "iam:CreateRole",
                "iam:PassRole",
                "iam:GetRole"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": { "Fn::Join": ["-", [
          { "Ref": "AWS::StackName"},
          "LambdaPostMergeRequestRole"
        ]]},
        "Roles": [
          {
            "Ref": "LambdaPostMergeRequestRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "LambdaGitlabCustomAuthorizerSG": {
      "Properties": {
        "GroupDescription": "Gitlab custom authorizer Lambda Security Group",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-post-mr-lambda-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": "dev-vpc-VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "LambdaGitlabCustomAuthorizer": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": ["LambdaGitlabCustomAuthorizerRole", "LambdaGitlabCustomAuthorizerRolePolicy", "LambdaGitlabCustomAuthorizerSG"],
      "Properties": {
        "Handler": "lambda_function.lambda_handler",
        "Role": { "Fn::GetAtt" : ["LambdaGitlabCustomAuthorizerRole", "Arn"] },
        "Code": {
          "S3Bucket" : {"Ref": "LambdaBucketName"},
          "S3Key" : {"Fn::Join": ["/", [
            {"Ref": "Version"},
            "gitlab_custom_authorizer",
            "lambda_function.zip"
          ]]}
        },
        "Runtime": "python2.7",
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "LambdaGitlabCustomAuthorizerSG"}
          ],
          "SubnetIds" : [
            {"Fn::ImportValue": "dev-vpc-PrivateSubnetAZ1"},
            {"Fn::ImportValue": "dev-vpc-PrivateSubnetAZ2"}
          ]
        },
        "Timeout": "25"
      }
    },
    "LambdaGitlabCustomAuthorizerInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [ "LambdaGitlabCustomAuthorizer", "Arn" ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "LambdaGitlabCustomAuthorizerRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "s3.amazonaws.com",
                  "apigateway.amazonaws.com",
                  "codepipeline.amazonaws.com",
                  "codebuild.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Type": "AWS::IAM::Role"
    },
    "LambdaGitlabCustomAuthorizerRolePolicy": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "lambda:*",
                "apigateway:*",
                "dynamodb:*",
                "cloudformation:*",
                "codepipeline:*",
                "codebuild:*",
                "s3:*",
                "ec2:*",
                "ssm:*",
                "kms:*",
                "logs:*",
                "xray:*",
                "sts:AssumeRole",
                "iam:DeleteRole",
                "iam:DeleteRolePolicy",
                "iam:PutRolePolicy",
                "iam:CreateRole",
                "iam:PassRole",
                "iam:GetRole"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": { "Fn::Join": ["-", [
          { "Ref": "AWS::StackName"},
          "LambdaGitlabCustomAuthorizerRole"
        ]]},
        "Roles": [
          {
            "Ref": "LambdaGitlabCustomAuthorizerRole"
          }
        ]
      },
      "Type": "AWS::IAM::Policy"
    },
    "ApiGatewayCustomLambdaAuth": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthType": "custom",
        "AuthorizerCredentials": {
          "Fn::GetAtt": [
            "LambdaGitlabCustomAuthorizerRole", "Arn"
          ]
        },
        "AuthorizerResultTtlInSeconds": 3600,
        "AuthorizerUri": {"Fn::Join": ["", [
          "arn:aws:apigateway:",
          { "Ref": "AWS::Region" },
          ":lambda:path/2015-03-31/functions/",
          { "Fn::GetAtt": [
            "LambdaGitlabCustomAuthorizer",
            "Arn"
            ]},
            "/invocations"
          ]]
        },
        "IdentitySource" : "method.request.header.X-Gitlab-Token",
        "Name" : "gitlab-webhook-auth",
        "RestApiId" : {"Ref": "RestAPI"},
        "Type" : "TOKEN"
      }
    }
  },
  "Outputs": {
    "LambdaPostMergeRequestFunctionName": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "merge-request-pipeline-api",
            {"Ref": "Environment"},
            "LambdaPostMergeRequestFunctionName"
          ]]
        }
      },
      "Value": {"Ref": "LambdaPostMergeRequest"}
    },
    "MergeRequestsURL": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "merge-request-pipeline-api",
            {"Ref": "Environment"},
            "MergeRequestsURL"
          ]]
        }
      },
      "Value": {
        "Fn::Join": ["", [
          "https://",
          {"Ref": "RestAPI"},
          ".",
          "execute-api",
          ".",
          {"Ref": "AWS::Region"},
          ".",
          "amazonaws.com",
          "/",
          {"Ref": "Environment"},
          "_",
          {"Ref": "Version"},
          "/",
          "MergeRequests"
        ]]
      }
    }
  }
}
