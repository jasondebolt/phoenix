{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launches a Jenkins server.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of the project.",
      "Type": "String"
    },
    "Version": {
      "Description": "The identifier/version of this Jenkins instance and stack",
      "Type": "String"
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t1.micro",
        "t2.small",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "IPWhitelist": {
      "Description": "IP Address to Whitelist (your IP address followed by /32)",
      "MinLength": "9",
      "MaxLength": "18",
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "WebSubnets": {
      "Description": "The type of subnets to place this web service in.",
      "AllowedValues": ["Public", "Private"],
      "Default": "Public",
      "Type": "String"
    },
    "Scheme": {
      "Description": "The elastic load balancer scheme",
      "AllowedValues": ["internal", "internet-facing"],
      "Default": "internal",
      "Type": "String"
    },
    "EmailAddress": {
      "Description": "What email address will receive the default Jenkins password",
      "Type": "String",
      "Default": ""
    },
    "VPCPrefix": {
      "Description": "The 'export' name prefix of the cloudformation stack for the VPC used by this service.",
      "Type": "String"
    },
    "DnsPrefix": {
      "Description": "Prefix for Jenkins' DNS record (<prefix>.<zone>)",
      "Type": "String",
      "Default": "builds"
    },
    "DnsZone": {
      "Description": "Route53-hosted zone to use for the DNS record (<prefix>.<zone>)",
      "Type": "String",
      "Default": "your-website.com"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AMI": "ami-6869aa05"
      },
      "us-west-1": {
        "AMI": "ami-7172b611"
      },
      "us-west-2": {
        "AMI": "ami-31490d51"
      },
      "eu-west-1": {
        "AMI": "ami-f9dd458a"
      }
    }
  },
  "Resources": {
    "CloudFormationLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": 7
      }
    },
    "JenkinsUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Policies": [
          {
            "PolicyName": "AllAccess",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "IAMAccess",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "NotAction": "iam:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "BuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "root",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "*",
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "BuildRole"
          }
        ]
      }
    },
    "BuildInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BuildRole"
          }
        ]
      }
    },
    "HostKeys": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "JenkinsUser"
        }
      }
    },
    "JenkinsAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              { "Ref": "ProjectName"},
              "JenkinsInstance",
              {"Ref": "Version"}
            ]]},
            "PropagateAtLaunch": "true"
          }
        ],
        "VPCZoneIdentifier" : [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }}
        ],
        "AvailabilityZones": [
          {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                {
                  "Ref": "VPCPrefix"
                },
                "vpc",
                "PrivateSubnetAZ1AvailabilityZone"
              ]]
            }
          },
          {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                {
                  "Ref": "VPCPrefix"
                },
                "vpc",
                "PrivateSubnetAZ2AvailabilityZone"
              ]]
            }
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "install": [
              "installConfig",
              "installApp",
              "installLogs"
            ]
          },
          "installConfig": {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource WebServerInstance ",
                      "         --configsets install_all ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "installLogs": {
            "packages": {
              "yum": {
                "awslogs": []
              }
            },
            "commands": {
              "01_create_state_directory": {
                "command": "mkdir -p /var/awslogs/state"
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/awslogs/awslogs.conf"
                  ]
                }
              }
            },
            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/state/agent-state\n",
                      "[/var/log/cloud-init.log]\n",
                      "file = /var/log/cloud-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cloud-init-output.log]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cloud-init-output.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-init.log]\n",
                      "file = /var/log/cfn-init.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-init.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-hup.log]\n",
                      "file = /var/log/cfn-hup.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-hup.log\n",
                      "datetime_format = \n",
                      "[/var/log/cfn-wire.log]\n",
                      "file = /var/log/cfn-wire.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/cfn-wire.log\n",
                      "datetime_format = \n",
                      "[/var/log/httpd]\n",
                      "file = /var/log/httpd/*\n",
                      "log_group_name = ",
                      {
                        "Ref": "CloudFormationLogs"
                      },
                      "\n",
                      "log_stream_name = {instance_id}/httpd\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              },
              "/var/lib/jenkins/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[default]",
                      "output = json"
                      "region = ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000700",
                "owner": "jenkins",
                "group": "jenkins"
              }
            }
          },
          "installApp": {
            "packages": {
              "python": {
                "awscli": []
              },
              "yum": {
                "git-all": []
              }
            },
            "files": {
              "/var/lib/jenkins/.aws/credentials": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[default]",
                      "aws_access_key_id={{access_key}}",
                      "aws_secret_access_key={{secret_key}}",
                      "\n"
                    ]
                  ]
                },
                "context": {
                  "access_key": {
                    "Ref": "HostKeys"
                  },
                  "secret_key": {
                    "Fn::GetAtt": [
                      "HostKeys",
                      "SecretAccessKey"
                    ]
                  }
                },
                "mode": "000700",
                "owner": "jenkins",
                "group": "jenkins"
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Fn::ImportValue": {
            "Fn::Join": ["-", [
              {"Ref": "ProjectName"},
              "microservice",
              "KeyPairName"
            ]]
          }
        },
        "IamInstanceProfile": {
          "Ref": "BuildInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "ServerSecurityGroup"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "/opt/aws/bin/cfn-init --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "    --resource LaunchConfig",
                "    --configsets install",
                "    --access-key ",
                {
                  "Ref": "HostKeys"
                },
                "    --secret-key ",
                {
                  "Fn::GetAtt": [
                    "HostKeys",
                    "SecretAccessKey"
                  ]
                },
                "    --region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit 'Failed to run cfn-init'\n",
                "# Post-cfn work\n",

                "# Updating to Java 8\n",
                "yum install -y java-1.8.0-openjdk.x86_64 || true \n",
                "sudo /usr/sbin/alternatives --set java /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/java || true\n",
                "sudo /usr/sbin/alternatives --set javac /usr/lib/jvm/jre-1.8.0-openjdk.x86_64/bin/javac || true \n",
                "yum remove java-1.7 || true \n",

                "sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo\n",
                "sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key\n",
                "yum install -y jenkins\n",
                "sudo mkdir -p /var/lib/jenkins\n",
                "sudo chown -R jenkins:jenkins /var/lib/jenkins\n",
                "sudo service jenkins start\n",
                "sudo chown -R jenkins:jenkins /var/lib/jenkins\n",
                "sudo chmod -R 755 /var/lib/jenkins\n",
                "# Start Jenkins\n",
                "sudo service jenkins restart\n",
                "sudo chkconfig jenkins on\n",
                "sleep 400\n",
                "# All is well, signal success\n",
                "./opt/aws/bin/cfn-signal --exit-code 0 --reason \"Stack setup complete\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "#EOF"
              ]
            ]
          }
        }
      }
    },
    "JenkinsELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Jenkins LBs",
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      }
    },
    "WorldToJenkinsELB": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "80",
        "GroupId": {"Ref": "JenkinsELBSecurityGroup"},
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "ToPort": "80"
      }
    },
    "WorldHTTPSToJenkinsELB": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "443",
        "GroupId": {"Ref": "JenkinsELBSecurityGroup"},
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "ToPort": "443"
      }
    },
    "ServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Jenkins servers",
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      }
    },
    "SSHToJenkins": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "22",
        "GroupId": {"Ref": "ServerSecurityGroup"},
        "IpProtocol": "tcp",
        "CidrIp": {"Ref" : "IPWhitelist"},
        "ToPort": "22"
      }
    },
    "WorldToJenkins": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "FromPort": "8080",
        "GroupId": {"Ref": "ServerSecurityGroup"},
        "IpProtocol": "tcp",
        "CidrIp": "0.0.0.0/0",
        "ToPort": "8080"
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups": [
          {
            "Ref": "JenkinsELBSecurityGroup"
          }
        ],
        "Subnets" : [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }}
        ],
        "Scheme": {"Ref": "Scheme"},
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "8080",
            "Protocol": "HTTP"
          },
          {
            "LoadBalancerPort": "443",
            "InstancePort": "8080",
            "Protocol": "HTTPS",
            "SSLCertificateId" : {
              "Fn::ImportValue": {
                "Fn::Join": ["-", [
                  {"Ref": "ProjectName"},
                  "microservice",
                  "SSLCertificateARN"
                ]]
              }
            }
          }
        ],
        "HealthCheck": {
          "Target": "TCP:8080",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        }
      }
    },
    "DnsRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DnsZone"
              },
              "."
            ]
          ]
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "DnsPrefix"
              },
              ".",
              {
                "Ref": "DnsZone"
              },
              "."
            ]
          ]
        },
        "Type": "CNAME",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "ElasticLoadBalancer",
              "DNSName"
            ]
          }
        ]
      }
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }
  },
  "Outputs": {
    "DnsAddress": {
      "Description": "Jenkins URL",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "DnsRecord"
            }
          ]
        ]
      }
    }
  }
}
