{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Generates all resources required for a microservice.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "CodeBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to biuld the image with.",
      "Default": "aws/codebuild/ubuntu-base:14.04",
      "Type": "String"
    },
    "CodeBuildBucketName": {
      "Description": "The bucket name in which CodeBuild artifacts will be stored.",
      "Type": "String"
    },
    "CodePipelineBucketName": {
      "Description": "The bucket name in which CodePipeline artifacts will be stored.",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain name that this service will fall under.",
      "Type": "String"
    },
    "SSLCertificateARN": {
      "Description": "The AWS ACM Certificate ARN.",
      "Type": "String"
    },
    "HostedZoneId": {
      "Description": "The Route53 hosted zone id that this service will fall under.",
      "Type": "String"
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
    },
    "LambdaBucketName": {
      "Description": "The bucket name in which Lambda artifacts will be stored.",
      "Type": "String"
    },
    "LoadBalancerLogsBucketName": {
      "Description": "The bucket name in which load balancer logs will be stored.",
      "Type": "String"
    },
    "SecretsBucketName": {
      "Description": "The bucket name in which KMS encrypted secrets will be stored.",
      "Type": "String"
    },
    "EncryptionKeyName": {
      "Description": "The name of the encryption key used by the microservice to encrypt/decrypt secrets.",
      "Type": "String"
    },
    "ProjectDescription": {
      "Description": "A description of your project",
      "Type": "String"
    },
    "NotificationEmail": {
      "Description": "The email to send notifications to for this microservice",
      "Type": "String"
    },
    "IAMRole": {
      "Description": "The IAM role that has access to all of the projects resources.",
      "Type": "String"
    }
  },
  "Resources": {
    "EncryptionKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Join": ["", [
            "alias/",
            "mosaic-",
            {
              "Ref": "ProjectName"
            },
            "-kms-key"
          ]]
        },
        "TargetKeyId": {
          "Ref": "EncryptionKey"
        }
      }
    },
    "EncryptionKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": {
          "Fn::Join": [" ", [
            "Encryption Key used by",
            {
              "Ref": "ProjectName"
            }
          ]]
        },
        "Enabled": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": ["", [
                    "arn:aws:iam::",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":root"
                  ]]
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow access for Key Administrators",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Ref": "IAMRole"
                }
              },
              "Action": "kms:*",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "EncryptedSecretsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "SecretsBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 99999,
            "Status": "Disabled"
          }]
        }
      }
    },
    "CodeBuildBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "CodeBuildBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "CodePipelineBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "CodePipelineBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "LambdaBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "LambdaBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "LoadBalancerLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "LoadBalancerLogsBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "MasterTriggerSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "GitMaster",
        "Subscription": [{
          "Endpoint": {
            "Ref": "NotificationEmail"
          },
          "Protocol": "email"
        }],
        "TopicName": {
          "Fn::Join": ["-", [
            "master-branch-event-triggered-for",
            {
              "Ref": "ProjectName"
            }
          ]]
        }
      }
    },
    "CodePipelineApprovalSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "CodePipeLn",
        "Subscription": [{
          "Endpoint": {
            "Ref": "NotificationEmail"
          },
          "Protocol": "email"
        }],
        "TopicName": {
          "Fn::Join": ["-", [
            "code-pipeline-approval-required-for",
            {
              "Ref": "ProjectName"
            }
          ]]
        }
      }
    },
    "CodeCommitRepository": {
      "Type": "AWS::CodeCommit::Repository",
      "Properties": {
        "RepositoryName": {
          "Ref": "ProjectName"
        },
        "RepositoryDescription": {
          "Ref": "ProjectDescription"
        },
        "Triggers": [{
          "Name": "MasterTrigger",
          "CustomData": {
            "Fn::Join": [" ", [
              "Project",
              {
                "Ref": "ProjectName"
              }
            ]]
          },
          "DestinationArn": {
            "Ref": "MasterTriggerSNSTopic"
          },
          "Branches": ["master"],
          "Events": ["all"]
        }]
      }
    },
    "ECRRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": {
          "Ref": "ProjectName"
        },
        "RepositoryPolicyText": {
          "Version": "2008-10-17",
          "Statement": [{
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": {
                "AWS": [{
                  "Ref": "IAMRole"
                }]
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ]
            },
            {
              "Sid": "CodeBuildAccess",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "ecr:*"
              ]
            }
          ]
        }
      }
    },
    "CodeBuildServiceRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "RoleName": {
          "Fn::Join": ["-", [
            "code-build",
            {
              "Ref": "ProjectName"
            },
            "service-role"
          ]]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "codebuild.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Policies": [{
          "PolicyName": {
            "Fn::Join": ["-", [
              "code-build",
              {
                "Ref": "ProjectName"
              },
              "service-policy"
            ]]
          },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "CodeBuildSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "CodeBuild",
            "SG"
          ]]
        },
        "GroupDescription": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "CodeBuild",
            "SG"
          ]]
        },
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Join": ["-", [
              "dev",
              "vpc",
              "VPC"
            ]]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "ProjectName"},
              "codebuild",
              "sg"
            ]]}
          }
        ]
      }
    },
    "CodeBuild": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Ref": "ProjectName"
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildUnitTest": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["", [{
              "Ref": "ProjectName"
            },
            "-unit-test"
          ]]
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-unit-test.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildLint": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "lint"
          ]]
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-lint.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildCalculateCosts": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "calculate-costs"
          ]]
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-calculate-costs.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildStaticAnalysis": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "static-analysis"
          ]]
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-static-analysis.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildIntegrationTest": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "integration-test"
          ]]
        },
        "ServiceRole": {
          "Ref": "CodeBuildServiceRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-integration-test.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodePipelineServiceRole": {
      "Type": "AWS::IAM::Role",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket"],
      "Properties": {
        "RoleName": {
          "Fn::Join": ["-", [
            "code-pipeline",
            {
              "Ref": "ProjectName"
            },
            "service-role"
          ]]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "codepipeline.amazonaws.com",
                "cloudformation.amazonaws.com"
              ]
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Policies": [{
          "PolicyName": {
            "Fn::Join": ["-", [
              "code-pipeline",
              {
                "Ref": "ProjectName"
              },
              "service-policy"
            ]]
          },
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": "*",
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "CodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket", "LambdaBucket", "CodePipelineServiceRole"],
      "Properties": {
        "RoleArn": {
          "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
        },
        "Name": {
          "Ref": "ProjectName"
        },
        "Stages": [{
            "Name": "Source",
            "Actions": [{
              "Name": "SourceAction",
              "ActionTypeId": {
                "Category": "Source",
                "Owner": "AWS",
                "Version": "1",
                "Provider": "CodeCommit"
              },
              "OutputArtifacts": [{
                "Name": "SourceOutput"
              }],
              "Configuration": {
                "RepositoryName": {
                  "Fn::GetAtt": [
                    "CodeCommitRepository",
                    "Name"
                  ]
                },
                "BranchName": "master"
              },
              "RunOrder": 1
            }]
          },
          {
            "Name": "Build",
            "Actions": [{
              "Name": "Build",
              "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "OutputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Ref": "ProjectName"
                  }
                }
              },
              {
                "Name": "UnitTest",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "unit-test"
                    ]]
                  }
                }
              },
              {
                "Name": "Lint",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "lint"
                    ]]
                  }
                }
              },
              {
                "Name": "CalculateCosts",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "calculate-costs"
                    ]]
                  }
                }
              },
              {
                "Name": "StaticAnalysis",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "static-analysis"
                    ]]
                  }
                }
              }
            ]
          },
          {
            "Name": "DeployToTestingEnvironments",
            "Actions": [
              {
                "Name": "Database",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "database",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-database-params-testing.json",
                  "TemplatePath": "BuildOutput::template-database.json"
                }
              },
              {
                "Name": "ECS",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ecs",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ecs-params-testing.json",
                  "TemplatePath": "BuildOutput::template-ecs.json"
                }
              },
              {
                "Name": "Lambda",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "lambda",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-lambda-params-testing.json",
                  "TemplatePath": "BuildOutput::template-lambda.json"
                }
              },
              {
                "Name": "APIGateway",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 3,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api.json"
                }
              },
              {
                "Name": "APIGatewayDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 4,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-deployment",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-deployment-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api-deployment-testing.json"
                }
              }
            ]
          },
          {
            "Name": "Tests",
            "Actions": [{
              "Name": "IntegrationTest",
              "ActionTypeId": {
                "Category": "Test",
                "Owner": "AWS",
                "Version": "1",
                "Provider": "CodeBuild"
              },
              "InputArtifacts": [{
                "Name": "SourceOutput"
              }],
              "RunOrder": 1,
              "Configuration": {
                "ProjectName": {
                  "Fn::Join": ["-", [{
                      "Ref": "ProjectName"
                    },
                    "integration-test"
                  ]]
                }
              }
            }]
          },
          {
            "Name": "Approval",
            "Actions": [{
              "Name": "ManualApproval",
              "ActionTypeId": {
                "Category": "Approval",
                "Owner": "AWS",
                "Version": "1",
                "Provider": "Manual"
              },
              "RunOrder": 1,
              "Configuration": {
                "NotificationArn": {
                  "Ref": "CodePipelineApprovalSNSTopic"
                }
              }
            }]
          },
          {
            "Name": "DeployToProduction",
            "Actions": [
              {
                "Name": "Database",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "database",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-database-params-prod.json",
                  "TemplatePath": "BuildOutput::template-database.json"
                }
              },
              {
                "Name": "ECS",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ecs",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ecs-params-prod.json",
                  "TemplatePath": "BuildOutput::template-ecs.json"
                }
              },
              {
                "Name": "Lambda",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "lambda",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-lambda-params-prod.json",
                  "TemplatePath": "BuildOutput::template-lambda.json"
                }
              },
              {
                "Name": "APIGateway",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 3,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api.json"
                }
              },
              {
                "Name": "APIGatewayDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 4,
                "Configuration": {
                  "RoleArn": {
                    "Fn::GetAtt": ["CodePipelineServiceRole", "Arn"]
                  },
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-deployment",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-deployment-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api-deployment-prod.json"
                }
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "CodePipelineBucket"
          }
        }
      }
    }
  },
  "Outputs": {
    "Domain": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "Domain"
          ]]
        }
      },
      "Value": {"Ref": "Domain"}
    },
    "HostedZoneId": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "HostedZoneId"
          ]]
        }
      },
      "Value": {"Ref": "HostedZoneId"}
    },
    "SSLCertificateARN": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "SSLCertificateARN"
          ]]
        }
      },
      "Value": {"Ref": "SSLCertificateARN"}
    },
    "KeyPairName": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "KeyPairName"
          ]]
        }
      },
      "Value": {"Ref": "KeyPairName"}
    },
    "LambdaBucketName": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "LambdaBucketName"
          ]]
        }
      },
      "Value": {"Ref": "LambdaBucket"}
    },
    "LoadBalancerLogsBucketName": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "LoadBalancerLogsBucketName"
          ]]
        }
      },
      "Value": {"Ref": "LoadBalancerLogsBucket"}
    },
    "KMSEncryptionKeyArn": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "KMSEncryptionKeyArn"
          ]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["EncryptionKey", "Arn"]
      }
    },
    "KMSEncryptionKeyId": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "KMSEncryptionKeyId"
          ]]
        }
      },
      "Value": {
        "Ref": "EncryptionKey"
      }
    },
    "KMSEncryptionKeyAlias": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "KMSEncryptionKeyAlias"
          ]]
        }
      },
      "Value": {
        "Ref": "EncryptionKeyAlias"
      }
    },
    "EncryptedSecretsBucket": {
      "Export": {
        "Name": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "microservice",
            "EncryptedSecretsBucket"
          ]]
        }
      },
      "Value": {
        "Ref": "EncryptedSecretsBucket"
      }
    },
    "CodeCommitRepositoryURL": {
      "Description": "The AWS Console URL of the CodeCommit Repository",
      "Value": {
        "Fn::Join": ["", ["https://console.aws.amazon.com/codecommit/home?region=",
          {"Ref": "AWS::Region"},
          "#/repository/",
          {
            "Ref": "ProjectName"
          }
        ]]
      }
    },
    "MasterTriggerSNSTopic": {
      "Description": "The name of this SNS topic",
      "Value": {
        "Fn::GetAtt": [
          "MasterTriggerSNSTopic",
          "TopicName"
        ]
      }
    },
    "MasterTriggerSNSTopicInstructions": {
      "Description": "Instructions for this SNS topic",
      "Value": "Check your email for an SNS subscription confirmation request"
    },
    "CodePipelineApprovalSNSTopic": {
      "Description": "The name of this SNS topic",
      "Value": {
        "Fn::GetAtt": [
          "CodePipelineApprovalSNSTopic",
          "TopicName"
        ]
      }
    },
    "CodePipelineApprovalSNSTopicInstructions": {
      "Description": "Instructions for this SNS topic",
      "Value": "Check your email for an SNS subscription confirmation request"
    },
    "DockerRepositoryURL": {
      "Description": "The AWS Console URL of the Docker ECR Repository",
      "Value": {
        "Fn::Join": ["", ["https://console.aws.amazon.com/ecs/home?region=",
          {"Ref": "AWS::Region"},
          "#/repositories/",
          {
            "Ref": "ProjectName"
          }
        ]]
      }
    },
    "DockerRepositoryInstructions": {
      "Description": "Instructions",
      "Value": "Click on repo link in the DockerRepositoryURL section and then click on the 'View Push Commands' button"
    }
  }
}
