{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Generates all resources required for a microservice.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/project-name"
    },
    "GitRepoName": {
      "Description": "The name of the git repo for this project.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/git-repo-name"
    },
    "GitRootProjectBranch": {
      "Description": "The main git branch associated with your main pipeline (i.e master, main, etc.)",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/git-root-project-branch"
    },
    "GitCurrentProjectBranch": {
      "Description": "The actual git branch associated with your current pipeline for this project (i.e demo, green, etc.). May be same branch as your GitRootProjectBranch.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/git-current-project-branch"
    },
    "CodeBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to build the image with.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/code-build-docker-image"
    },
    "CodeBuildBucketName": {
      "Description": "The bucket name in which CodeBuild artifacts will be stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/code-build-bucket-name"
    },
    "CodePipelineBucketName": {
      "Description": "The bucket name in which CodePipeline artifacts will be stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/code-pipeline-bucket-name"
    },
    "MicroserviceBucketName": {
      "Description": "The bucket name in which cloudformation templates and lambda functions will be stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/bucket-name"
    },
    "Domain": {
      "Description": "The domain name that this service will fall under.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/domain"
    },
    "HostedZoneId": {
      "Description": "The Route53 hosted zone id that this service will fall under.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/hosted-zone-id"
    },
    "KeyPairName":{
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/key-pair-name"
    },
    "LambdaBucketName": {
      "Description": "The bucket name in which Lambda artifacts will be stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/lambda-bucket-name"
    },
    "LoadBalancerLogsBucketName": {
      "Description": "The bucket name in which load balancer logs will be stored.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/load-balancer-logs-bucket-name"
    },
    "ProjectDescription": {
      "Description": "A description of your project",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/project-description"
    },
    "NotificationEmail": {
      "Description": "The email to send notifications to for this microservice",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/notification-email"
    },
    "IAMRole": {
      "Description": "The IAM role that has access to all of the projects resources.",
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/microservice/phoenix/global/iam-role"
    },
    "Version": {
      "Description": "The identifier/version used to tag some resources within the microservice stack, such as Lambda function version. Version also allow us to force update source code for Lambda functions.",
      "Type": "String"
    }
  },
  "Conditions": {
    "ProjectUsesRootGitBranch" : {"Fn::Equals" : [
      {"Ref" : "GitRootProjectBranch"}, {"Ref": "GitCurrentProjectBranch"}
    ]}
  },
  "Resources": {
    "ECRMainRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": {
          "Fn::Join": ["-", [
            {"Ref": "ProjectName"},
            "main"
          ]]
        },
        "RepositoryPolicyText": {
          "Version": "2008-10-17",
          "Statement": [{
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": {
                "AWS": [{
                  "Ref": "IAMRole"
                }]
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ]
            },
            {
              "Sid": "CodeBuildAccess",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "ecr:*"
              ]
            }
          ]
        }
      }
    },
    "CodeBuildBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "CodeBuildBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "CodePipelineBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "CodePipelineBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "LoadBalancerLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {
          "Ref": "LoadBalancerLogsBucketName"
        },
        "LifecycleConfiguration": {
          "Rules": [{
            "ExpirationInDays": 180,
            "Status": "Enabled"
          }]
        }
      }
    },
    "MasterTriggerSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "GitMaster",
        "Subscription": [{
          "Endpoint": {
            "Ref": "NotificationEmail"
          },
          "Protocol": "email"
        }],
        "TopicName": {
          "Fn::Join": ["-", [
            "master-branch-event-triggered-for",
            {
              "Ref": "ProjectName"
            }
          ]]
        }
      }
    },
    "CodePipelineFailedSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "PipelineFailed",
        "Subscription": [{
          "Endpoint": {
            "Ref": "NotificationEmail"
          },
          "Protocol": "email"
        }],
        "TopicName": {
          "Fn::Join": ["-", [
            "pipeline-failed-for",
            {
              "Ref": "ProjectName"
            }
          ]]
        }
      }
    },
    "CodePipelineApprovalSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "CodePipeLn",
        "Subscription": [{
          "Endpoint": {
            "Ref": "NotificationEmail"
          },
          "Protocol": "email"
        }],
        "TopicName": {
          "Fn::Join": ["-", [
            "code-pipeline-approval-required-for",
            {
              "Ref": "ProjectName"
            }
          ]]
        }
      }
    },
    "CodeCommitRepository": {
      "Type": "AWS::CodeCommit::Repository",
      "Condition": "ProjectUsesRootGitBranch",
      "Properties": {
        "RepositoryName": {
          "Ref": "GitRepoName"
        },
        "RepositoryDescription": {
          "Ref": "ProjectDescription"
        },
        "Triggers": [
          {
            "Name": "MasterTrigger",
            "CustomData": {
              "Fn::Join": [" ", [
                "Project",
                {
                  "Ref": "ProjectName"
                }
              ]]
            },
            "DestinationArn": {
              "Ref": "MasterTriggerSNSTopic"
            },
            "Branches": [
              {"Ref": "GitCurrentProjectBranch"}
            ],
            "Events": ["all"]
          }
        ]
      }
    },
    "CodeBuildServiceRoleArnParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/microservice/phoenix/global/code-build-service-role-arn",
        "Type": "String",
        "Value": {"Ref": "IAMRole"},
        "Description": "The Code Build Service Role ARN"
      }
    },
    "CodeBuildSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "CodeBuild",
            "SG"
          ]]
        },
        "GroupDescription": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "CodeBuild",
            "SG"
          ]]
        },
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Join": ["-", [
              "dev",
              "vpc",
              "VPC"
            ]]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "ProjectName"},
              "codebuild",
              "sg"
            ]]}
          }
        ]
      }
    },
    "CodeBuildSecurityGroupParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/microservice/phoenix/global/code-build-security-group",
        "Type": "String",
        "Value": {"Ref": "CodeBuildSecurityGroup"},
        "Description": "The Code Build security group ID"
      }
    },
    "CodeBuild": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Ref": "ProjectName"
        },
        "ServiceRole": {
          "Ref": "IAMRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildUnitTest": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["", [{
              "Ref": "ProjectName"
            },
            "-unit-test"
          ]]
        },
        "ServiceRole": {
          "Ref": "IAMRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-unit-test.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildLint": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "lint"
          ]]
        },
        "ServiceRole": {
          "Ref": "IAMRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-lint.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildIntegrationTest": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "integration-test"
          ]]
        },
        "ServiceRole": {
          "Ref": "IAMRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-integration-test.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildE2ETest": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "e2e-test"
          ]]
        },
        "ServiceRole": {
          "Ref": "IAMRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-e2e-test.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildPostProdDeploy": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "VpcConfig": {
          "SecurityGroupIds": [
            {"Ref": "CodeBuildSecurityGroup"}
          ],
          "Subnets": [
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ1"
              ]]
            }},
            {"Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "PrivateSubnetAZ2"
              ]]
            }}
          ],
          "VpcId":  {
            "Fn::ImportValue": {
              "Fn::Join": ["-", [
                "dev",
                "vpc",
                "VPC"
              ]]
            }
          }
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {
            "Ref": "CodeBuildBucketName"
          },
          "NamespaceType": "BUILD_ID",
          "Name": {
            "Ref": "ProjectName"
          },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location": {
            "Fn::Join": ["", [{
                "Ref": "CodeBuildBucketName"
              },
              "/",
              {
                "Ref": "ProjectName"
              },
              "-cache"
            ]]
          },
          "Type": "S3"
        },
        "Description": {
          "Ref": "ProjectDescription"
        },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [
            {
              "Name" : "AWS_ACCOUNT_ID",
              "Type" : "PLAINTEXT",
              "Value" : {"Ref": "AWS::AccountId"}
            }
          ],
          "Image": {
            "Ref": "CodeBuildDockerImage"
          },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": {
          "Fn::Join": ["-", [{
              "Ref": "ProjectName"
            },
            "post-prod-deploy"
          ]]
        },
        "ServiceRole": {
          "Ref": "IAMRole"
        },
        "Source": {
          "BuildSpec": "Phoenix/buildspec-post-prod-deploy.yml",
          "Type": "CODECOMMIT",
          "Location": {
            "Fn::Join": ["", [
              "https://git-codecommit.",
              {"Ref": "AWS::Region"},
              ".amazonaws.com/v1/repos/",
              {
                "Ref": "ProjectName"
              }
            ]]
          }
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodePipelineServiceRoleArnParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Name": "/microservice/phoenix/global/code-pipeline-service-role-arn",
        "Type": "String",
        "Value": {"Ref": "IAMRole"},
        "Description": "The Code Pipeline Service Role ARN"
      }
    },
    "CodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "DependsOn": ["CodeBuildBucket", "CodePipelineBucket"],
      "Properties": {
        "RoleArn": {"Ref": "IAMRole"},
        "Name": {
          "Ref": "ProjectName"
        },
        "Stages": [{
            "Name": "Source",
            "Actions": [{
              "Name": "SourceAction",
              "ActionTypeId": {
                "Category": "Source",
                "Owner": "AWS",
                "Version": "1",
                "Provider": "CodeCommit"
              },
              "OutputArtifacts": [{
                "Name": "SourceOutput"
              }],
              "Configuration": {
                "RepositoryName": {"Ref": "GitRepoName"},
                "BranchName": {"Ref": "GitCurrentProjectBranch"}
              },
              "RunOrder": 1
            }]
          },
          {
            "Name": "Build",
            "Actions": [{
              "Name": "Build",
              "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "OutputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Ref": "ProjectName"
                  }
                }
              },
              {
                "Name": "UnitTest",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "unit-test"
                    ]]
                  }
                }
              },
              {
                "Name": "Lint",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "lint"
                    ]]
                  }
                }
              }
            ]
          },
          {
            "Name": "DeployToTesting",
            "Actions": [
              {
                "Name": "Database",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "database",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-database-params-testing.json",
                  "TemplatePath": "BuildOutput::template-database.json"
                }
              },
              {
                "Name": "EC2",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ec2",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ec2-params-testing.json",
                  "TemplatePath": "BuildOutput::template-ec2.json"
                }
              },
              {
                "Name": "Lambda",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "lambda",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-lambda-params-testing.json",
                  "TemplatePath": "BuildOutput::template-lambda.json"
                }
              },
              {
                "Name": "APIGatewayDomain",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-custom-domain",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-custom-domain-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api-custom-domain.json"
                }
              },
              {
                "Name": "V0_APIDocumentation",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-documentation-v0",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-documentation-v0-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api-documentation.json"
                }
              },
              {
                "Name": "APIGateway",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api.json"
                }
              },
              {
                "Name": "DatabaseMigration",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "rds-migration",
                      "testing"
                    ]]
                  }
                }
              },
              {
                "Name": "ECSMainService",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ecs",
                      "main",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ecs-task-main-params-testing.json",
                  "TemplatePath": "BuildOutput::template-ecs-task.json"
                }
              },
              {
                "Name": "APIGatewayInternals",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 4,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-internals",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-internals-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api-internals.json"
                }
              },
              {
                "Name": "APIGatewayDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 5,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-deployment",
                      "testing"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-deployment-params-testing.json",
                  "TemplatePath": "BuildOutput::template-api-deployment.json"
                }
              },
              {
                "Name": "PublishAPIDocumentation",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 6,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "api-documentation",
                      "testing"
                    ]]
                  }
                }
              },
              {
                "Name": "IntegrationTest",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 6,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "integration-test"
                    ]]
                  }
                }
              },
              {
                "Name": "ManualApproval",
                "ActionTypeId": {
                  "Category": "Approval",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "Manual"
                },
                "RunOrder": 6,
                "Configuration": {
                  "NotificationArn": {
                    "Ref": "CodePipelineApprovalSNSTopic"
                  }
                }
              }
            ]
          },
          {
            "Name": "DeployToEndToEnd",
            "Actions": [
              {
                "Name": "Database",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "database",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-database-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-database.json"
                }
              },
              {
                "Name": "EC2",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ec2",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ec2-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-ec2.json"
                }
              },
              {
                "Name": "Lambda",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "lambda",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-lambda-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-lambda.json"
                }
              },
              {
                "Name": "APIGatewayDomain",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-custom-domain",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-custom-domain-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-api-custom-domain.json"
                }
              },
              {
                "Name": "V0_APIDocumentation",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-documentation-v0",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-documentation-v0-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-api-documentation.json"
                }
              },
              {
                "Name": "APIGateway",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-api.json"
                }
              },
              {
                "Name": "DatabaseMigration",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "rds-migration",
                      "e2e"
                    ]]
                  }
                }
              },
              {
                "Name": "ECSMainService",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ecs",
                      "main",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ecs-task-main-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-ecs-task.json"
                }
              },
              {
                "Name": "APIGatewayInternals",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 3,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-internals",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-internals-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-api-internals.json"
                }
              },
              {
                "Name": "APIGatewayDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 4,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-deployment",
                      "e2e"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-deployment-params-e2e.json",
                  "TemplatePath": "BuildOutput::template-api-deployment.json"
                }
              },
              {
                "Name": "PublishAPIDocumentation",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 5,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "api-documentation",
                      "e2e"
                    ]]
                  }
                }
              },
              {
                "Name": "EndToEndTest",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 5,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "e2e-test"
                    ]]
                  }
                }
              },
              {
                "Name": "ManualApproval",
                "ActionTypeId": {
                  "Category": "Approval",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "Manual"
                },
                "RunOrder": 5,
                "Configuration": {
                  "NotificationArn": {
                    "Ref": "CodePipelineApprovalSNSTopic"
                  }
                }
              }
            ]
          },
          {
            "Name": "DeployToProduction",
            "Actions": [
              {
                "Name": "Database",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "database",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-database-params-prod.json",
                  "TemplatePath": "BuildOutput::template-database.json"
                }
              },
              {
                "Name": "EC2",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ec2",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ec2-params-prod.json",
                  "TemplatePath": "BuildOutput::template-ec2.json"
                }
              },
              {
                "Name": "Lambda",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "lambda",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-lambda-params-prod.json",
                  "TemplatePath": "BuildOutput::template-lambda.json"
                }
              },
              {
                "Name": "APIGatewayDomain",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-custom-domain",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-custom-domain-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api-custom-domain.json"
                }
              },
              {
                "Name": "V0_APIDocumentation",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-documentation-v0",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-documentation-v0-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api-documentation.json"
                }
              },
              {
                "Name": "APIGateway",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api.json"
                }
              },
              {
                "Name": "DatabaseMigration",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "rds-migration",
                      "prod"
                    ]]
                  }
                }
              },
              {
                "Name": "ECSMainService",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "ecs",
                      "main",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-ecs-task-main-params-prod.json",
                  "TemplatePath": "BuildOutput::template-ecs-task.json"
                }
              },
              {
                "Name": "APIGatewayInternals",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 3,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-internals",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-internals-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api-internals.json"
                }
              },
              {
                "Name": "APIGatewayDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [{
                  "Name": "BuildOutput"
                }],
                "RunOrder": 4,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_NAMED_IAM",
                  "RoleArn": {"Ref": "IAMRole"},
                  "StackName": {
                    "Fn::Join": ["-", [
                      {"Ref": "ProjectName"},
                      "api-deployment",
                      "prod"
                    ]]
                  },
                  "TemplateConfiguration": "BuildOutput::t-api-deployment-params-prod.json",
                  "TemplatePath": "BuildOutput::template-api-deployment.json"
                }
              },
              {
                "Name": "PublishAPIDocumentation",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 5,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "api-documentation",
                      "prod"
                    ]]
                  }
                }
              },
              {
                "Name": "PostProdDeploy",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [{
                  "Name": "SourceOutput"
                }],
                "RunOrder": 6,
                "Configuration": {
                  "ProjectName": {
                    "Fn::Join": ["-", [{
                        "Ref": "ProjectName"
                      },
                      "post-prod-deploy"
                    ]]
                  }
                }
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "CodePipelineBucket"
          }
        }
      }
    },
    "CodePipelineFailedCloudWatchRule": {
      "Type" : "AWS::Events::Rule",
      "Properties" : {
        "Description" : "CodePipelineFailEvent",
        "EventPattern" : {
          "source": [ "aws.codepipeline" ],
          "detail-type": [ "CodePipeline Pipeline Execution State Change" ],
          "detail": {"state": ["FAILED"]},
          "resources": [{"Ref": "CodePipeline"}]
        },
        "State" : "ENABLED",
        "Targets" : [ {"Arn": {"Ref": "CodePipelineFailedSNSTopic"},
          "Id": {"Fn::Join": ["-", ["event-pipeline-failed-for", {"Ref": "ProjectName"}] ]
          } } ]
      }
    }
  }
}
