{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Generates all resources required for a microservice.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "AWSAccountId": {
      "Description": "The AWS account associated with this microservice",
      "Type": "String"
    },
    "AWSRegion": {
      "Description": "The AWS region associated with this microservice",
      "Type": "String"
    },
    "StackName": {
      "Description": "The name of this CloudFormation stack.",
      "Type": "String"
    },
    "CodeBuildDockerImage": {
      "Description": "The ECR name (i.e '{account_id}.dkr.ecr.us-east-1.amazonaws.com/{image_name}:0.1.0') to biuld the image with.",
      "Default": "aws/codebuild/ubuntu-base:14.04",
      "Type": "String"
    },
    "CodeBuildBucketName": {
      "Description": "The bucket name in which CodeBuild artifacts will be stored.",
      "Type": "String"
    },
    "CodePipelineBucketName": {
      "Description": "The bucket name in which CodePipeline artifacts will be stored.",
      "Type": "String"
    },
    "LambdaBucketName": {
      "Description": "The bucket name in which Lambda artifacts will be stored.",
      "Type": "String"
    },
    "ProjectDescription": {
      "Description": "A description of your project",
      "Type": "String"
    },
    "NotificationEmail": {
      "Description": "The email to send notifications to for this microservice",
      "Type": "String"
    },
    "IAMRole": {
      "Description": "The IAM role that has access to all of the projects resources.",
      "Type": "String"
    },
    "CodePipelineServiceRole": {
      "Description": "The service role used by CodePipeline to interact with other AWS services like CodeCommit, CodeBuild, S3, etc.",
      "Type": "String"
    },
    "CodePipelineDeployActionRole": {
      "Description": "The service role assumed by CodePipeline execute deploy actions",
      "Type": "String"
    },
    "VpcId": {
      "Description": "The ID of the VPC in which CodeBuild nodes will be placed.",
      "Type": "String"
    },
    "Subnets": {
      "Description": "The subnets in which CodeBuild nodes will be placed. (i.e 'subnet-abc444,subnet-bbb555')",
      "Type": "CommaDelimitedList"
    },
    "SecurityGroupIds": {
      "Description": "The security groups that CodeBuild nodes will be associated with. (i.e 'sg-abc444,sg-bbb555')",
      "Type": "CommaDelimitedList"
    },
    "Username": {
      "Description": "Ther username of the user who last updated the stack, if relevant.",
      "Type": "String",
      "Default": ""
    }
  },
  "Resources": {
    "CodeBuildBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref": "CodeBuildBucketName" }
      }
    },
    "CodePipelineBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref": "CodePipelineBucketName" }
      }
    },
    "LambdaBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref": "LambdaBucketName" }
      }
    },
    "MasterTriggerSNSTopic": {
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "DisplayName" : "GitMaster",
        "Subscription" : [
          {
            "Endpoint": { "Ref": "NotificationEmail" },
            "Protocol": "email"
          }
        ],
        "TopicName" : { "Fn::Join": ["-", [
          "master-branch-event-triggered-for",
          { "Ref": "ProjectName" }
        ]]}
      }
    },
    "CodePipelineApprovalSNSTopic": {
      "Type" : "AWS::SNS::Topic",
      "Properties" : {
        "DisplayName" : "CodePipeLn",
        "Subscription" : [
          {
            "Endpoint": { "Ref": "NotificationEmail" },
            "Protocol": "email"
          }
        ],
        "TopicName" : { "Fn::Join": ["-", [
          "code-pipeline-approval-required-for",
          { "Ref": "ProjectName" }
        ]]}
      }
    },
    "CodeCommitRepository": {
      "Type": "AWS::CodeCommit::Repository",
      "Properties" : {
        "RepositoryName" : { "Ref": "ProjectName" },
        "RepositoryDescription" : { "Ref": "ProjectDescription"},
        "Triggers" : [
          {
            "Name" : "MasterTrigger",
            "CustomData" : { "Fn::Join": [" ", [
              "Project",
              { "Ref": "ProjectName" }
            ]]},
            "DestinationArn" : { "Ref":"MasterTriggerSNSTopic" },
            "Branches" : ["master"],
            "Events" : ["all"]
          }
        ]
      }
    },
    "ECRRepository": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName" : {
          "Ref": "ProjectName"
        },
        "RepositoryPolicyText" : {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "AllowPushPull",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  {"Ref": "IAMRole"}
                ]
              },
              "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload"
              ]
            },
            {
              "Sid": "CodeBuildAccess",
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": [
                "ecr:*"
              ]
            }
          ]
        }
      }
    },
    "CodeBuildServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Join": ["-", [
          "code-build",
          { "Ref": "ProjectName" },
          "service-role"
        ]]},
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "codebuild.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": { "Fn::Join": ["-", [
              "code-build",
              { "Ref": "ProjectName" },
              "service-policy"
            ]]},
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AccessCacheAndArtifactBucket",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": ["", [
                        "arn:aws:s3:::",
                        { "Ref": "CodeBuildBucket"},
                        "/*"
                      ]]
                    },
                    {
                      "Fn::Join": ["", [
                        "arn:aws:s3:::",
                        { "Ref": "LambdaBucketName"},
                        "/*"
                      ]]
                    }
                  ],
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ]
                },
                {
                  "Sid": "AccessCodePipelineBucket",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": ["", [
                      "arn:aws:s3:::",
                      { "Ref": "CodePipelineBucket" },
                      "/*"
                    ]]
                  },
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:GetObjectVersion"
                  ]
                },
                {
                  "Sid": "AccessLogs",
                  "Effect": "Allow",
                  "Resource": [
                    { "Fn::Join": ["", [
                      "arn:aws:logs:",
                      {"Ref": "AWSRegion"},
                      ":",
                      {"Ref": "AWSAccountId"},
                      ":log-group:/aws/codebuild/",
                      { "Ref": "ProjectName" },
                      "*"
                    ]]},
                    { "Fn::Join": ["", [
                      "arn:aws:logs:",
                      {"Ref": "AWSRegion"},
                      ":",
                      {"Ref": "AWSAccountId"},
                      ":log-group:/aws/codebuild/",
                      { "Ref": "ProjectName" },
                      "*:*"
                    ]]}
                  ],
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ]
                },
                {
                  "Sid": "AccessCodeCommitRepo",
                  "Effect": "Allow",
                  "Resource": [
                    { "Fn::Join": ["", [
                      "arn:aws:codecommit:",
                      { "Ref": "AWSRegion" },
                      ":",
                      { "Ref": "AWSAccountId" },
                      ":",
                      { "Ref": "ProjectName" }
                    ]]}
                  ],
                  "Action": [
                    "codecommit:GitPull"
                  ]
                },
                {
                  "Sid": "AccessEc2",
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "AccessSystemsManagerParameters",
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters"
                  ],
                  "Resource": {"Fn::Join": ["", [
                    "arn:aws:ssm:",
                    { "Ref": "AWSRegion" },
                    ":",
                    { "Ref": "AWSAccountId" },
                    ":parameter/CodeBuild/*"
                  ]]}
                },
                {
                  "Sid": "AccessECR",
                  "Effect": "Allow",
                  "Action": [
                    "ecr:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CodeBuild": {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "VpcConfig": {
          "SecurityGroupIds": {"Ref": "SecurityGroupIds"},
          "Subnets": {"Ref": "Subnets"},
          "VpcId": {"Ref": "VpcId"}
        },
        "Artifacts": {
          "Type": "S3",
          "Location": { "Ref": "CodeBuildBucket" },
          "NamespaceType": "BUILD_ID",
          "Name": { "Ref": "ProjectName" },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location" : { "Fn::Join": ["", [
            {"Ref": "CodeBuildBucket"},
            "/",
            { "Ref": "ProjectName"},
            "-cache"
          ]]},
          "Type" : "S3"
        },
        "Description": { "Ref": "ProjectDescription" },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [],
          "Image": { "Ref": "CodeBuildDockerImage" },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": { "Ref": "ProjectName" },
        "ServiceRole": { "Ref": "CodeBuildServiceRole" },
        "Source": {
          "Type": "CODECOMMIT",
          "Location": { "Fn::Join": ["", [
            "https://git-codecommit.",
            {"Ref": "AWSRegion"},
            ".amazonaws.com/v1/repos/",
            { "Ref": "ProjectName"}
          ]]}
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildUnitTest": {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "VpcConfig": {
          "SecurityGroupIds": {"Ref": "SecurityGroupIds"},
          "Subnets": {"Ref": "Subnets"},
          "VpcId": {"Ref": "VpcId"}
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {"Ref": "CodeBuildBucket"},
          "NamespaceType": "BUILD_ID",
          "Name": { "Ref": "ProjectName" },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location" : { "Fn::Join": ["", [
            {"Ref": "CodeBuildBucket"},
            "/",
            { "Ref": "ProjectName"},
            "-cache"
          ]]},
          "Type" : "S3"
        },
        "Description": { "Ref": "ProjectDescription" },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [],
          "Image": { "Ref": "CodeBuildDockerImage" },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": { "Fn::Join": ["", [
          { "Ref": "ProjectName" },
          "-unit-test"
        ]]},
        "ServiceRole": { "Ref": "CodeBuildServiceRole" },
        "Source": {
          "BuildSpec": "buildspec-unit-test.yml",
          "Type": "CODECOMMIT",
          "Location": { "Fn::Join": ["", [
            "https://git-codecommit.",
            {"Ref": "AWSRegion"},
            ".amazonaws.com/v1/repos/",
            { "Ref": "ProjectName"}
          ]]}
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildLint": {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "VpcConfig": {
          "SecurityGroupIds": {"Ref": "SecurityGroupIds"},
          "Subnets": {"Ref": "Subnets"},
          "VpcId": {"Ref": "VpcId"}
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {"Ref": "CodeBuildBucket"},
          "NamespaceType": "BUILD_ID",
          "Name": { "Ref": "ProjectName" },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location" : { "Fn::Join": ["", [
            {"Ref": "CodeBuildBucket"},
            "/",
            { "Ref": "ProjectName"},
            "-cache"
          ]]},
          "Type" : "S3"
        },
        "Description": { "Ref": "ProjectDescription" },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [],
          "Image": { "Ref": "CodeBuildDockerImage" },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": { "Fn::Join": ["-", [
          { "Ref": "ProjectName" },
          "lint"
        ]]},
        "ServiceRole": { "Ref": "CodeBuildServiceRole" },
        "Source": {
          "BuildSpec": "buildspec-lint.yml",
          "Type": "CODECOMMIT",
          "Location": { "Fn::Join": ["", [
            "https://git-codecommit.",
            {"Ref": "AWSRegion"},
            ".amazonaws.com/v1/repos/",
            { "Ref": "ProjectName"}
          ]]}
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildCalculateCosts": {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "VpcConfig": {
          "SecurityGroupIds": {"Ref": "SecurityGroupIds"},
          "Subnets": {"Ref": "Subnets"},
          "VpcId": {"Ref": "VpcId"}
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {"Ref": "CodeBuildBucket"},
          "NamespaceType": "BUILD_ID",
          "Name": { "Ref": "ProjectName" },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location" : { "Fn::Join": ["", [
            {"Ref": "CodeBuildBucket"},
            "/",
            { "Ref": "ProjectName"},
            "-cache"
          ]]},
          "Type" : "S3"
        },
        "Description": { "Ref": "ProjectDescription" },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [],
          "Image": { "Ref": "CodeBuildDockerImage" },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": { "Fn::Join": ["-", [
          { "Ref": "ProjectName" },
          "calculate-costs"
        ]]},
        "ServiceRole": { "Ref": "CodeBuildServiceRole" },
        "Source": {
          "BuildSpec": "buildspec-calculate-costs.yml",
          "Type": "CODECOMMIT",
          "Location": { "Fn::Join": ["", [
            "https://git-codecommit.",
            {"Ref": "AWSRegion"},
            ".amazonaws.com/v1/repos/",
            { "Ref": "ProjectName"}
          ]]}
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildStaticAnalysis": {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "VpcConfig": {
          "SecurityGroupIds": {"Ref": "SecurityGroupIds"},
          "Subnets": {"Ref": "Subnets"},
          "VpcId": {"Ref": "VpcId"}
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {"Ref": "CodeBuildBucket"},
          "NamespaceType": "BUILD_ID",
          "Name": { "Ref": "ProjectName" },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location" : { "Fn::Join": ["", [
            {"Ref": "CodeBuildBucket"},
            "/",
            { "Ref": "ProjectName"},
            "-cache"
          ]]},
          "Type" : "S3"
        },
        "Description": { "Ref": "ProjectDescription" },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [],
          "Image": { "Ref": "CodeBuildDockerImage" },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": { "Fn::Join": ["-", [
          { "Ref": "ProjectName" },
          "static-analysis"
        ]]},
        "ServiceRole": { "Ref": "CodeBuildServiceRole" },
        "Source": {
          "BuildSpec": "buildspec-static-analysis.yml",
          "Type": "CODECOMMIT",
          "Location": { "Fn::Join": ["", [
            "https://git-codecommit.",
            {"Ref": "AWSRegion"},
            ".amazonaws.com/v1/repos/",
            { "Ref": "ProjectName"}
          ]]}
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodeBuildIntegrationTest": {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "VpcConfig": {
          "SecurityGroupIds": {"Ref": "SecurityGroupIds"},
          "Subnets": {"Ref": "Subnets"},
          "VpcId": {"Ref": "VpcId"}
        },
        "Artifacts": {
          "Type": "S3",
          "Location": {"Ref": "CodeBuildBucket"},
          "NamespaceType": "BUILD_ID",
          "Name": { "Ref": "ProjectName" },
          "Packaging": "NONE"
        },
        "BadgeEnabled": "true",
        "Cache": {
          "Location" : { "Fn::Join": ["", [
            {"Ref": "CodeBuildBucket"},
            "/",
            { "Ref": "ProjectName"},
            "-cache"
          ]]},
          "Type" : "S3"
        },
        "Description": { "Ref": "ProjectDescription" },
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_LARGE",
          "EnvironmentVariables": [],
          "Image": { "Ref": "CodeBuildDockerImage" },
          "PrivilegedMode": "true",
          "Type": "LINUX_CONTAINER"
        },
        "Name": { "Fn::Join": ["-", [
          { "Ref": "ProjectName" },
          "integration-test"
        ]]},
        "ServiceRole": { "Ref": "CodeBuildServiceRole" },
        "Source": {
          "BuildSpec": "buildspec-integration-test.yml",
          "Type": "CODECOMMIT",
          "Location": { "Fn::Join": ["", [
            "https://git-codecommit.",
            {"Ref": "AWSRegion"},
            ".amazonaws.com/v1/repos/",
            { "Ref": "ProjectName"}
          ]]}
        },
        "TimeoutInMinutes": 60,
        "Tags": []
      }
    },
    "CodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "RoleArn": { "Ref": "CodePipelineServiceRole" },
        "Name": { "Ref": "ProjectName" },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": "SourceAction",
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeCommit"
                },
                "OutputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "Configuration": {
                  "RepositoryName": { "Fn::GetAtt": [
                    "CodeCommitRepository",
                    "Name"
                  ]},
                  "BranchName": "master"
                },
                "RunOrder": 1
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": "Build",
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "OutputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": { "Ref": "ProjectName" }
                }
              },
              {
                "Name": "UnitTest",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "unit-test"
                  ]]}
                }
              },
              {
                "Name": "Lint",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "lint"
                  ]]}
                }
              },
              {
                "Name": "CalculateCosts",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "calculate-costs"
                  ]]}
                }
              },
              {
                "Name": "StaticAnalysis",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "static-analysis"
                  ]]}
                }
              }
            ]
          },
          {
            "Name": "StagingClusterDeploy",
            "Actions": [
              {
                "Name": "StagingECS",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": { "Ref": "CodePipelineDeployActionRole" },
                  "StackName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "staging-ecs"
                  ]]},
                  "TemplateConfiguration": "BuildOutput::staging-ecs-params.json",
                  "TemplatePath": "BuildOutput::template-ecs.json"
                }
              },
              {
                "Name": "StagingLambda",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": { "Ref": "CodePipelineDeployActionRole" },
                  "StackName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "staging-lambda"
                  ]]},
                  "TemplateConfiguration": "BuildOutput::staging-lambda-params.json",
                  "TemplatePath": "BuildOutput::template-api-lambda.json"
                }
              },
              {
                "Name": "StagingAPIGateway",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 2,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": { "Ref": "CodePipelineDeployActionRole" },
                  "StackName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "staging-api-gateway"
                  ]]},
                  "TemplateConfiguration": "BuildOutput::staging-lambda-params.json",
                  "TemplatePath": "BuildOutput::template-api-lambda.json"
                }
              }
              {
                "Name": "StagingAPIGatewayDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 3,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": { "Ref": "CodePipelineDeployActionRole" },
                  "StackName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "staging-lambda"
                  ]]},
                  "TemplateConfiguration": "BuildOutput::staging-lambda-params.json",
                  "TemplatePath": "BuildOutput::template-api-lambda.json"
                }
              }
            ]
          },
          {
            "Name": "StagingClusterTests",
            "Actions": [
              {
                "Name": "IntegrationTest",
                "ActionTypeId": {
                  "Category": "Test",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CodeBuild"
                },
                "InputArtifacts": [
                  {
                    "Name": "SourceOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ProjectName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "integration-test"
                  ]]}
                }
              }
            ]
          },
          {
            "Name": "Approval",
            "Actions": [
              {
                "Name": "ManualApproval",
                "ActionTypeId": {
                  "Category": "Approval",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "Manual"
                },
                "RunOrder": 1,
                "Configuration": {
                  "NotificationArn": { "Ref": "CodePipelineApprovalSNSTopic" }
                }
              }
            ]
          },
          {
            "Name": "ProdClusterDeploy",
            "Actions": [
              {
                "Name": "ProdECSDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": { "Ref": "CodePipelineDeployActionRole" },
                  "StackName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "prod-ecs"
                  ]]},
                  "TemplateConfiguration": "BuildOutput::prod-ecs-params.json",
                  "TemplatePath": "BuildOutput::template-ecs.json"
                }
              },
              {
                "Name": "ProdLambdaDeploy",
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": "1",
                  "Provider": "CloudFormation"
                },
                "InputArtifacts": [
                  {
                    "Name": "BuildOutput"
                  }
                ],
                "RunOrder": 1,
                "Configuration": {
                  "ActionMode": "CREATE_UPDATE",
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": { "Ref": "CodePipelineDeployActionRole" },
                  "StackName": { "Fn::Join": ["-", [
                    { "Ref": "ProjectName" },
                    "prod-lambda"
                  ]]},
                  "TemplateConfiguration": "BuildOutput::prod-lambda-params.json",
                  "TemplatePath": "BuildOutput::template-api-lambda.json"
                }
              },
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {"Ref": "CodePipelineBucket"}
        }
      }
    }
  },
  "Outputs" : {
    "GitCloneInstructions": {
      "Description": "IMPORTANT! Instructions for cloning the Git repo",
      "Value": "For mac users, you may need to disable the OSX keychain for CodeCommit credentials and delete any keys stored in there. Your keychain credentials will expire 15 minutes after you clone your repo by default!: https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-https-unixes.html"
    },
    "GitInstructions": {
      "Description": "IMPORTANT! Code Commit will NOT automatically create a master branch.",
      "Value": {"Fn::Join": ["<br />", [
        "1) ",
        {"Fn::Join": [" ", [
          "git clone",
          { "Fn::GetAtt": [
            "CodeCommitRepository",
            "CloneUrlHttp"
          ]}
        ]]},
        "2) Create local README.md file and add content to it",
        "3) git add README.md",
        "4) git commit",
        "5) git push origin master",
        "6) If you have issues, see the GitCloneInstructions section of this doc."
      ]]}
    },
    "CodeCommitRepositoryURL" : {
      "Description" : "The AWS Console URL of the CodeCommit Repository",
      "Value" :  {"Fn::Join": ["",
        ["https://console.aws.amazon.com/codecommit/home?region=",
          { "Ref": "AWS::Region"},
          "#/repository/",
          { "Ref": "ProjectName" }
        ]]
      }
    },
    "MasterTriggerSNSTopic": {
      "Description" : "The name of this SNS topic",
      "Value": { "Fn::GetAtt": [
          "MasterTriggerSNSTopic",
          "TopicName"
      ]}
    },
    "MasterTriggerSNSTopicInstructions": {
      "Description" : "Instructions for this SNS topic",
      "Value": "Check your email for an SNS subscription confirmation request"
    },
    "CodePipelineApprovalSNSTopic": {
      "Description" : "The name of this SNS topic",
      "Value": { "Fn::GetAtt": [
          "CodePipelineApprovalSNSTopic",
          "TopicName"
      ]}
    },
    "CodePipelineApprovalSNSTopicInstructions": {
      "Description" : "Instructions for this SNS topic",
      "Value": "Check your email for an SNS subscription confirmation request"
    },
    "DockerRepositoryURL" : {
      "Description" : "The AWS Console URL of the Docker ECR Repository",
      "Value" :  {"Fn::Join": ["",
        ["https://console.aws.amazon.com/ecs/home?region=",
          { "Ref": "AWS::Region"},
          "#/repositories/",
          { "Ref": "ProjectName" }
        ]]
      }
    },
    "DockerRepositoryInstructions" : {
      "Description" : "Instructions",
      "Value" :  "Click on repo link in the DockerRepositoryURL section and then click on the 'View Push Commands' button"
    }
  }
}
