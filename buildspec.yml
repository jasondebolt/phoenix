version: 0.2

phases:
  install:
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay&
      #- timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
      - timeout 15s sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
    commands:
      - # We set AWS_ACCOUNT_ID as an enviornment variable in the CloudFormation template which creates this CodeBuild job.
      - # We assume that the region that the CodeBuild nodes are running (AWS_DEFAULT_REGION) is the same as all other stack resource.
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - PROJECT_NAME=`jq -r '.Parameters.ProjectName' template-microservice-params.json`
      - LAMBDA_BUCKET_NAME=`jq -r '.Parameters.LambdaBucketName' template-microservice-params.json`
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$PROJECT_NAME
      - VERSION_ID=v_$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=$VERSION_ID
  build:
    commands:
      - echo Build started on `date`
      - # DOCKER
      - echo ===== DOCKER BUILD =====
      - echo replacing build number in the task definition param files.
      - sed "s/IMAGE_TAG/$IMAGE_TAG/g" template-ecs-params-testing.json > t-ecs-params-testing.json
      - sed "s/IMAGE_TAG/$IMAGE_TAG/g" template-ecs-params-prod.json > t-ecs-params-prod.json
      - echo Building the Docker image from the Dockerfile.
      - docker build -t $REPOSITORY_URI:latest ecs
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      - # LAMBDA
      - echo ===== LAMBDA BUILD =====
      - echo ||---- PROJECTS FUNCTION ----||
      - echo replacing VERSION_ID in the lambda params file.
      - sed "s/VERSION_ID/$VERSION_ID/g" template-lambda-params-testing.json > t-lambda-params-testing.json
      - sed "s/VERSION_ID/$VERSION_ID/g" template-lambda-params-prod.json > t-lambda-params-prod.json
      - echo Building the 'projects' lambda function...
      - mkdir -p builds/projects
      - cp -rf lambda/projects/* builds/projects/
      - cd builds/projects/
      - pip install -r requirements.txt -t .
      - zip -r lambda_function.zip ./*
      - aws s3 cp lambda_function.zip s3://$LAMBDA_BUCKET_NAME/$VERSION_ID/projects/
      - cd ../../
      - # API Gateway Version
      - echo replacing VERSION_ID in the api params file.
      - sed "s/VERSION_ID/$VERSION_ID/g" template-api-params-testing.json > t-api-params-testing.json
      - sed "s/VERSION_ID/$VERSION_ID/g" template-api-params-prod.json > t-api-params-prod.json
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
artifacts:
    files:
      - # DOCKER
      - template-ecs.json
      - t-ecs-params-testing.json
      - t-ecs-params-prod.json
      - # LAMBDA
      - template-lambda.json
      - t-lambda-params-testing.json
      - t-lambda-params-prod.json
      - # API Gateway
      - template-api.json
      - t-api-params-testing.json
      - t-api-params-prod.json
